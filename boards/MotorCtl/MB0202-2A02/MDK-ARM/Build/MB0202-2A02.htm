<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Build\MB0202-2A02.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Build\MB0202-2A02.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Fri Nov 17 23:54:55 2023
<BR><P>
<H3>Maximum Stack Usage =        408 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
bus_ita_func_callback &rArr; FirmWare_Excute &rArr; Firmware_ReportEvent &rArr; bus_ita_hb_send &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[163]">__user_initial_stackheap</a>
 <LI><a href="#[235]">OS_CPU_SR_Save</a>
 <LI><a href="#[238]">OS_CPU_SR_Restore</a>
 <LI><a href="#[243]">OSStartHighRdy</a>
 <LI><a href="#[25f]">OSCtxSw</a>
 <LI><a href="#[237]">OSIntCtxSw</a>
 <LI><a href="#[11]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[a]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">NMI_Handler</a><BR>
 <LI><a href="#[c]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">MemManage_Handler</a><BR>
 <LI><a href="#[d]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">BusFault_Handler</a><BR>
 <LI><a href="#[e]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">UsageFault_Handler</a><BR>
 <LI><a href="#[f]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">SVC_Handler</a><BR>
 <LI><a href="#[10]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">DebugMon_Handler</a><BR>
 <LI><a href="#[25]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">ADC_IRQHandler</a><BR>
 <LI><a href="#[264]">QuickSort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[264]">QuickSort</a><BR>
 <LI><a href="#[139]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[139]">_sys_exit</a><BR>
 <LI><a href="#[197]">Error_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[197]">Error_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[6e]">ADC_DMAConvCplt</a> from stm32f4xx_hal_adc.o(i.ADC_DMAConvCplt) referenced from stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[70]">ADC_DMAError</a> from stm32f4xx_hal_adc.o(i.ADC_DMAError) referenced from stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[6f]">ADC_DMAHalfConvCplt</a> from stm32f4xx_hal_adc.o(i.ADC_DMAHalfConvCplt) referenced from stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[25]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[105]">AppTaskStart</a> from my_main.o(i.AppTaskStart) referenced from my_main.o(i.my_main)
 <LI><a href="#[d]">BusFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">CAN1_RX0_IRQHandler</a> from bus_can_f4_hal.o(i.CAN1_RX0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">CAN1_SCE_IRQHandler</a> from bus_can_f4_hal.o(i.CAN1_SCE_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[61]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">DebugMon_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">EXTI15_10_IRQHandler</a> from motor_cfg.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">EXTI1_IRQHandler</a> from motor_cfg.o(i.EXTI1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1c]">EXTI3_IRQHandler</a> from motor_cfg.o(i.EXTI3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">EXTI4_IRQHandler</a> from motor_cfg.o(i.EXTI4_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">EXTI9_5_IRQHandler</a> from motor_cfg.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[63]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[ce]">FirmWareConfig_Return_GetFromBytes</a> from protocols.o(i.FirmWareConfig_Return_GetFromBytes) referenced from protocols.o(i.New_FirmWareConfig_Return)
 <LI><a href="#[cd]">FirmWareConfig_Return_ToBytes</a> from protocols.o(i.FirmWareConfig_Return_ToBytes) referenced from protocols.o(i.New_FirmWareConfig_Return)
 <LI><a href="#[d0]">FirmWareConfig_Send_GetFromBytes</a> from protocols.o(i.FirmWareConfig_Send_GetFromBytes) referenced from protocols.o(i.New_FirmWareConfig_Send)
 <LI><a href="#[cf]">FirmWareConfig_Send_ToBytes</a> from protocols.o(i.FirmWareConfig_Send_ToBytes) referenced from protocols.o(i.New_FirmWareConfig_Send)
 <LI><a href="#[d2]">FirmWareReadyEvent_Send_GetFromBytes</a> from protocols.o(i.FirmWareReadyEvent_Send_GetFromBytes) referenced from protocols.o(i.New_FirmWareReadyEvent_Send)
 <LI><a href="#[d1]">FirmWareReadyEvent_Send_ToBytes</a> from protocols.o(i.FirmWareReadyEvent_Send_ToBytes) referenced from protocols.o(i.New_FirmWareReadyEvent_Send)
 <LI><a href="#[d4]">FirmWareTransmitFile_Return_GetFromBytes</a> from protocols.o(i.FirmWareTransmitFile_Return_GetFromBytes) referenced from protocols.o(i.New_FirmWareTransmitFile_Return)
 <LI><a href="#[d3]">FirmWareTransmitFile_Return_ToBytes</a> from protocols.o(i.FirmWareTransmitFile_Return_ToBytes) referenced from protocols.o(i.New_FirmWareTransmitFile_Return)
 <LI><a href="#[d6]">FirmWareTransmitFile_Send_GetFromBytes</a> from protocols.o(i.FirmWareTransmitFile_Send_GetFromBytes) referenced from protocols.o(i.New_FirmWareTransmitFile_Send)
 <LI><a href="#[d5]">FirmWareTransmitFile_Send_ToBytes</a> from protocols.o(i.FirmWareTransmitFile_Send_ToBytes) referenced from protocols.o(i.New_FirmWareTransmitFile_Send)
 <LI><a href="#[d8]">FirmWareVersionGet_Return_GetFromBytes</a> from protocols.o(i.FirmWareVersionGet_Return_GetFromBytes) referenced from protocols.o(i.New_FirmWareVersionGet_Return)
 <LI><a href="#[d7]">FirmWareVersionGet_Return_ToBytes</a> from protocols.o(i.FirmWareVersionGet_Return_ToBytes) referenced from protocols.o(i.New_FirmWareVersionGet_Return)
 <LI><a href="#[da]">FirmWareVersionGet_Send_GetFromBytes</a> from protocols.o(i.FirmWareVersionGet_Send_GetFromBytes) referenced from protocols.o(i.New_FirmWareVersionGet_Send)
 <LI><a href="#[d9]">FirmWareVersionGet_Send_ToBytes</a> from protocols.o(i.FirmWareVersionGet_Send_ToBytes) referenced from protocols.o(i.New_FirmWareVersionGet_Send)
 <LI><a href="#[62]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b]">HardFault_Handler</a> from thread_safe.o(i.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[dc]">McuReset_Return_GetFromBytes</a> from protocols.o(i.McuReset_Return_GetFromBytes) referenced from protocols.o(i.New_McuReset_Return)
 <LI><a href="#[db]">McuReset_Return_ToBytes</a> from protocols.o(i.McuReset_Return_ToBytes) referenced from protocols.o(i.New_McuReset_Return)
 <LI><a href="#[de]">McuReset_Send_GetFromBytes</a> from protocols.o(i.McuReset_Send_GetFromBytes) referenced from protocols.o(i.New_McuReset_Send)
 <LI><a href="#[dd]">McuReset_Send_ToBytes</a> from protocols.o(i.McuReset_Send_ToBytes) referenced from protocols.o(i.New_McuReset_Send)
 <LI><a href="#[c]">MemManage_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[c4]">Motor_Thread</a> from motor_thread.o(i.Motor_Thread) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[a]">NMI_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[66]">OSTaskSwHook</a> from os_cpu_c.o(i.OSTaskSwHook) referenced from os_cpu_a.o(.text)
 <LI><a href="#[e0]">OS_TaskIdle</a> from os_core.o(i.OS_TaskIdle) referenced from os_core.o(i.OS_InitTaskIdle)
 <LI><a href="#[df]">OS_TaskReturn</a> from os_task.o(i.OS_TaskReturn) referenced from os_cpu_c.o(i.OSTaskStkInit)
 <LI><a href="#[e1]">OS_TaskStat</a> from os_core.o(i.OS_TaskStat) referenced from os_core.o(i.OS_InitTaskStat)
 <LI><a href="#[56]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[60]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11]">PendSV_Handler</a> from os_cpu_a.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[f]">SVC_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">SysTick_Handler</a> from os_cpu_c.o(i.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[64]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[15]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">TIM2_IRQHandler</a> from motor_cmd_extend.o(i.TIM2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">UART4_IRQHandler</a> from rv_cfg.o(i.UART4_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">USART1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">USART3_IRQHandler</a> from rv_cfg.o(i.USART3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[e]">UsageFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11b]">__main</a> from __main.o(!!!main) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[102]">_mutex_acquire</a> from thread_safe.o(i._mutex_acquire) referenced from thread_safe.o(i.malloc_safe_insure)
 <LI><a href="#[104]">_mutex_free</a> from thread_safe.o(i._mutex_free) referenced from thread_safe.o(i.malloc_safe_insure)
 <LI><a href="#[101]">_mutex_initialize</a> from thread_safe.o(i._mutex_initialize) referenced from thread_safe.o(i.malloc_safe_insure)
 <LI><a href="#[103]">_mutex_release</a> from thread_safe.o(i._mutex_release) referenced from thread_safe.o(i.malloc_safe_insure)
 <LI><a href="#[68]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[6c]">bus_ita_func_broadcast</a> from my_callback.o(i.bus_ita_func_broadcast) referenced from my_main.o(i.AppTaskStart)
 <LI><a href="#[6d]">bus_ita_func_callback</a> from my_callback.o(i.bus_ita_func_callback) referenced from my_main.o(i.AppTaskStart)
 <LI><a href="#[10e]">byte_rev</a> from runze_sv04_new.o(i.byte_rev) referenced from runze_sv04_new.o(i.runze_new)
 <LI><a href="#[6a]">can_adapter_init</a> from bus_can_f4_hal.o(i.can_adapter_init) referenced from my_main.o(i.AppTaskStart)
 <LI><a href="#[6b]">can_adapter_send</a> from bus_can_f4_hal.o(i.can_adapter_send) referenced from my_main.o(i.AppTaskStart)
 <LI><a href="#[117]">cfg_covert_io_state</a> from io_mod.o(i.cfg_covert_io_state) referenced from io_mod.o(i.writable_io_new)
 <LI><a href="#[107]">current_position_query</a> from runze_sv04_new.o(i.current_position_query) referenced from runze_sv04_new.o(i.runze_new)
 <LI><a href="#[106]">current_version_query</a> from runze_sv04_new.o(i.current_version_query) referenced from runze_sv04_new.o(i.runze_new)
 <LI><a href="#[67]">fputc</a> from thread_safe.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[118]">group_write</a> from io_mod.o(i.group_write) referenced from io_mod.o(i.writable_io_new)
 <LI><a href="#[ea]">hd_average_signal_read</a> from ad_signal_cfg.o(i.hd_average_signal_read) referenced from ad_signal_cfg.o(i.ad_signal_hd_init)
 <LI><a href="#[eb]">hd_average_signal_read_old</a> from ad_signal_cfg.o(i.hd_average_signal_read_old) referenced from ad_signal_cfg.o(i.ad_signal_hd_init)
 <LI><a href="#[e9]">hd_group_read_all</a> from ad_signal_cfg.o(i.hd_group_read_all) referenced from ad_signal_cfg.o(i.ad_signal_hd_init)
 <LI><a href="#[e8]">hd_group_read_by</a> from ad_signal_cfg.o(i.hd_group_read_by) referenced from ad_signal_cfg.o(i.ad_signal_hd_init)
 <LI><a href="#[e2]">hd_signal_read</a> from ad_signal_cfg.o(i.hd_signal_read) referenced from ad_signal_cfg.o(i.ad_signal_hd_init)
 <LI><a href="#[e3]">hd_signal_read_ad</a> from ad_signal_cfg.o(i.hd_signal_read_ad) referenced from ad_signal_cfg.o(i.ad_signal_hd_init)
 <LI><a href="#[e4]">hd_signal_read_ad_to_press</a> from ad_signal_cfg.o(i.hd_signal_read_ad_to_press) referenced from ad_signal_cfg.o(i.ad_signal_hd_init)
 <LI><a href="#[e6]">hd_signal_read_ad_to_press_differ</a> from ad_signal_cfg.o(i.hd_signal_read_ad_to_press_differ) referenced from ad_signal_cfg.o(i.ad_signal_hd_init)
 <LI><a href="#[e7]">hd_signal_read_array</a> from ad_signal_cfg.o(i.hd_signal_read_array) referenced from ad_signal_cfg.o(i.ad_signal_hd_init)
 <LI><a href="#[ec]">hd_signal_read_average</a> from ad_signal_cfg.o(i.hd_signal_read_average) referenced from ad_signal_cfg.o(i.ad_signal_hd_init)
 <LI><a href="#[e5]">hd_signal_read_two</a> from ad_signal_cfg.o(i.hd_signal_read_two) referenced from ad_signal_cfg.o(i.ad_signal_hd_init)
 <LI><a href="#[116]">io_hd_write</a> from io_thread_cfg.o(i.io_hd_write) referenced from io_thread_cfg.o(i.writable_io_init)
 <LI><a href="#[69]">io_thread_create</a> from my_main.o(i.io_thread_create) referenced from my_main.o(i.AppTaskStart)
 <LI><a href="#[119]">io_write</a> from io_mod.o(i.io_write) referenced from io_mod.o(i.writable_io_new)
 <LI><a href="#[a9]">m0_event_read</a> from motor_cmd_extend.o(i.m0_event_read) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[aa]">m0_io_read</a> from motor_cfg.o(i.m0_io_read) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[ab]">m0_io_write</a> from motor_cfg.o(i.m0_io_write) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[b1]">m1_event_read</a> from motor_cmd_extend.o(i.m1_event_read) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[b2]">m1_io_read</a> from motor_cfg.o(i.m1_io_read) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[b3]">m1_io_write</a> from motor_cfg.o(i.m1_io_write) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[b9]">m2_event_read</a> from motor_cmd_extend.o(i.m2_event_read) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[ba]">m2_io_read</a> from motor_cfg.o(i.m2_io_read) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[bb]">m2_io_write</a> from motor_cfg.o(i.m2_io_write) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[c1]">m3_event_read</a> from motor_cfg.o(i.m3_event_read) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[c2]">m3_io_read</a> from motor_cfg.o(i.m3_io_read) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[c3]">m3_io_write</a> from motor_cfg.o(i.m3_io_write) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[a1]">mTMC5130Motor_GetStatus</a> from mtmc5130device.o(i.mTMC5130Motor_GetStatus) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[a3]">mTMC5130Motor_Move</a> from mtmc5130device.o(i.mTMC5130Motor_Move) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[9d]">mTMC5130Motor_MoveGPIOEvent</a> from mtmc5130device.o(i.mTMC5130Motor_MoveGPIOEvent) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[9c]">mTMC5130Motor_MoveStopEvent</a> from mtmc5130device.o(i.mTMC5130Motor_MoveStopEvent) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[9f]">mTMC5130Motor_MultiMove</a> from mtmc5130device.o(i.mTMC5130Motor_MultiMove) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[9b]">mTMC5130Motor_Reset</a> from mtmc5130device.o(i.mTMC5130Motor_Reset) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[a2]">mTMC5130Motor_Rotate</a> from mtmc5130device.o(i.mTMC5130Motor_Rotate) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[9e]">mTMC5130Motor_SeqMove</a> from mtmc5130device.o(i.mTMC5130Motor_SeqMove) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[a0]">mTMC5130Motor_Stop</a> from mtmc5130device.o(i.mTMC5130Motor_Stop) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[a7]">motor0_backzeor</a> from motor_cfg.o(i.motor0_backzeor) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[a4]">motor0_listen_event</a> from motor_cfg.o(i.motor0_listen_event) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[a5]">motor0_listen_io</a> from motor_cfg.o(i.motor0_listen_io) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[a6]">motor0_reset</a> from motor_cfg.o(i.motor0_reset) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[a8]">motor0_state_machine</a> from motor_cfg.o(i.motor0_state_machine) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[af]">motor1_backzeor</a> from motor_cfg.o(i.motor1_backzeor) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[ac]">motor1_listen_event</a> from motor_cfg.o(i.motor1_listen_event) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[ad]">motor1_listen_io</a> from motor_cfg.o(i.motor1_listen_io) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[ae]">motor1_reset</a> from motor_cfg.o(i.motor1_reset) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[b0]">motor1_state_machine</a> from motor_cfg.o(i.motor1_state_machine) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[b7]">motor2_backzeor</a> from motor_cfg.o(i.motor2_backzeor) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[b4]">motor2_listen_event</a> from motor_cfg.o(i.motor2_listen_event) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[b5]">motor2_listen_io</a> from motor_cfg.o(i.motor2_listen_io) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[b6]">motor2_reset</a> from motor_cfg.o(i.motor2_reset) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[b8]">motor2_state_machine</a> from motor_cfg.o(i.motor2_state_machine) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[bf]">motor3_backzeor</a> from motor_cfg.o(i.motor3_backzeor) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[bc]">motor3_listen_event</a> from motor_cfg.o(i.motor3_listen_event) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[bd]">motor3_listen_io</a> from motor_cfg.o(i.motor3_listen_io) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[be]">motor3_reset</a> from motor_cfg.o(i.motor3_reset) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[c0]">motor3_state_machine</a> from motor_cfg.o(i.motor3_state_machine) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[108]">motor_state_query</a> from runze_sv04_new.o(i.motor_state_query) referenced from runze_sv04_new.o(i.runze_new)
 <LI><a href="#[ee]">packet_callback_thread</a> from bus.o(i.packet_callback_thread) referenced from bus.o(i.bus_app_init)
 <LI><a href="#[71]">packet_parse</a> from itf_00010000.o(i.packet_parse) referenced from itf_00010000.o(i.Itf_00010000_new)
 <LI><a href="#[73]">packet_parse</a> from itf_00010010.o(i.packet_parse) referenced from itf_00010010.o(i.Itf_00010010_new)
 <LI><a href="#[75]">packet_parse</a> from itf_00010020 .o(i.packet_parse) referenced from itf_00010020 .o(i.Itf_00010020_new)
 <LI><a href="#[77]">packet_parse</a> from itf_00010030 .o(i.packet_parse) referenced from itf_00010030 .o(i.Itf_00010030_new)
 <LI><a href="#[79]">packet_parse</a> from itf_00010031.o(i.packet_parse) referenced from itf_00010031.o(i.Itf_00010031_new)
 <LI><a href="#[7b]">packet_parse</a> from itf_00010040 .o(i.packet_parse) referenced from itf_00010040 .o(i.Itf_00010040_new)
 <LI><a href="#[7d]">packet_parse</a> from itf_00010050.o(i.packet_parse) referenced from itf_00010050.o(i.Itf_00010050_new)
 <LI><a href="#[7f]">packet_parse</a> from itf_00010060.o(i.packet_parse) referenced from itf_00010060.o(i.Itf_00010060_new)
 <LI><a href="#[81]">packet_parse</a> from itf_00010062.o(i.packet_parse) referenced from itf_00010062.o(i.Itf_00010062_new)
 <LI><a href="#[83]">packet_parse</a> from itf_00010070.o(i.packet_parse) referenced from itf_00010070.o(i.Itf_00010070_new)
 <LI><a href="#[85]">packet_parse</a> from itf_00010071.o(i.packet_parse) referenced from itf_00010071.o(i.Itf_00010071_new)
 <LI><a href="#[87]">packet_parse</a> from itf_00010080.o(i.packet_parse) referenced from itf_00010080.o(i.Itf_00010080_new)
 <LI><a href="#[89]">packet_parse</a> from itf_00010082.o(i.packet_parse) referenced from itf_00010082.o(i.Itf_00010082_new)
 <LI><a href="#[8b]">packet_parse</a> from itf_00010083.o(i.packet_parse) referenced from itf_00010083.o(i.Itf_00010083_new)
 <LI><a href="#[8d]">packet_parse</a> from itf_000100a0.o(i.packet_parse) referenced from itf_000100a0.o(i.Itf_000100a0_new)
 <LI><a href="#[8f]">packet_parse</a> from itf_000100a1.o(i.packet_parse) referenced from itf_000100a1.o(i.Itf_000100a1_new)
 <LI><a href="#[91]">packet_parse</a> from itf_000100a2.o(i.packet_parse) referenced from itf_000100a2.o(i.Itf_000100a2_new)
 <LI><a href="#[93]">packet_parse</a> from itf_01000b04.o(i.packet_parse) referenced from itf_01000b04.o(i.Itf_01000b04_new)
 <LI><a href="#[95]">packet_parse</a> from itf_01000c20.o(i.packet_parse) referenced from itf_01000c20.o(i.Itf_01000c20_new)
 <LI><a href="#[97]">packet_parse</a> from itf_01000c21.o(i.packet_parse) referenced from itf_01000c21.o(i.Itf_01000c21_new)
 <LI><a href="#[99]">packet_parse</a> from itf_01000c23.o(i.packet_parse) referenced from itf_01000c23.o(i.Itf_01000c23_new)
 <LI><a href="#[ef]">packet_parse</a> from itf_00020000.o(i.packet_parse) referenced from itf_00020000.o(i.itf_00020000_new)
 <LI><a href="#[f1]">packet_parse</a> from itf_00020001.o(i.packet_parse) referenced from itf_00020001.o(i.itf_00020001_new)
 <LI><a href="#[f3]">packet_parse</a> from itf_00030000.o(i.packet_parse) referenced from itf_00030000.o(i.itf_00030000_new)
 <LI><a href="#[f5]">packet_parse</a> from itf_00030001.o(i.packet_parse) referenced from itf_00030001.o(i.itf_00030001_new)
 <LI><a href="#[f7]">packet_parse</a> from itf_00040000.o(i.packet_parse) referenced from itf_00040000.o(i.itf_00040000_new)
 <LI><a href="#[f9]">packet_parse</a> from itf_00040001.o(i.packet_parse) referenced from itf_00040001.o(i.itf_00040001_new)
 <LI><a href="#[fb]">packet_parse</a> from itf_00040010.o(i.packet_parse) referenced from itf_00040010.o(i.itf_00040010_new)
 <LI><a href="#[fd]">packet_parse</a> from itf_00040020.o(i.packet_parse) referenced from itf_00040020.o(i.itf_00040020_new)
 <LI><a href="#[ff]">packet_parse</a> from itf_00040030.o(i.packet_parse) referenced from itf_00040030.o(i.itf_00040030_new)
 <LI><a href="#[c6]">queue0_pend</a> from motor_cfg.o(i.queue0_pend) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[110]">queue0_pend</a> from rv_cfg.o(i.queue0_pend) referenced from rv_cfg.o(i.rv_hd_init)
 <LI><a href="#[c5]">queue0_post</a> from motor_cfg.o(i.queue0_post) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[10f]">queue0_post</a> from rv_cfg.o(i.queue0_post) referenced from rv_cfg.o(i.rv_hd_init)
 <LI><a href="#[c8]">queue1_pend</a> from motor_cfg.o(i.queue1_pend) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[113]">queue1_pend</a> from rv_cfg.o(i.queue1_pend) referenced from rv_cfg.o(i.rv_hd_init)
 <LI><a href="#[c7]">queue1_post</a> from motor_cfg.o(i.queue1_post) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[112]">queue1_post</a> from rv_cfg.o(i.queue1_post) referenced from rv_cfg.o(i.rv_hd_init)
 <LI><a href="#[ca]">queue2_pend</a> from motor_cfg.o(i.queue2_pend) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[c9]">queue2_post</a> from motor_cfg.o(i.queue2_post) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[cc]">queue3_pend</a> from motor_cfg.o(i.queue3_pend) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[cb]">queue3_post</a> from motor_cfg.o(i.queue3_post) referenced from motor_cfg.o(i.MotorInit)
 <LI><a href="#[72]">ret_and_free</a> from itf_00010000.o(i.ret_and_free) referenced from itf_00010000.o(i.Itf_00010000_new)
 <LI><a href="#[74]">ret_and_free</a> from itf_00010010.o(i.ret_and_free) referenced from itf_00010010.o(i.Itf_00010010_new)
 <LI><a href="#[76]">ret_and_free</a> from itf_00010020 .o(i.ret_and_free) referenced from itf_00010020 .o(i.Itf_00010020_new)
 <LI><a href="#[78]">ret_and_free</a> from itf_00010030 .o(i.ret_and_free) referenced from itf_00010030 .o(i.Itf_00010030_new)
 <LI><a href="#[7a]">ret_and_free</a> from itf_00010031.o(i.ret_and_free) referenced from itf_00010031.o(i.Itf_00010031_new)
 <LI><a href="#[7c]">ret_and_free</a> from itf_00010040 .o(i.ret_and_free) referenced from itf_00010040 .o(i.Itf_00010040_new)
 <LI><a href="#[7e]">ret_and_free</a> from itf_00010050.o(i.ret_and_free) referenced from itf_00010050.o(i.Itf_00010050_new)
 <LI><a href="#[80]">ret_and_free</a> from itf_00010060.o(i.ret_and_free) referenced from itf_00010060.o(i.Itf_00010060_new)
 <LI><a href="#[82]">ret_and_free</a> from itf_00010062.o(i.ret_and_free) referenced from itf_00010062.o(i.Itf_00010062_new)
 <LI><a href="#[84]">ret_and_free</a> from itf_00010070.o(i.ret_and_free) referenced from itf_00010070.o(i.Itf_00010070_new)
 <LI><a href="#[86]">ret_and_free</a> from itf_00010071.o(i.ret_and_free) referenced from itf_00010071.o(i.Itf_00010071_new)
 <LI><a href="#[88]">ret_and_free</a> from itf_00010080.o(i.ret_and_free) referenced from itf_00010080.o(i.Itf_00010080_new)
 <LI><a href="#[8a]">ret_and_free</a> from itf_00010082.o(i.ret_and_free) referenced from itf_00010082.o(i.Itf_00010082_new)
 <LI><a href="#[8c]">ret_and_free</a> from itf_00010083.o(i.ret_and_free) referenced from itf_00010083.o(i.Itf_00010083_new)
 <LI><a href="#[8e]">ret_and_free</a> from itf_000100a0.o(i.ret_and_free) referenced from itf_000100a0.o(i.Itf_000100a0_new)
 <LI><a href="#[90]">ret_and_free</a> from itf_000100a1.o(i.ret_and_free) referenced from itf_000100a1.o(i.Itf_000100a1_new)
 <LI><a href="#[92]">ret_and_free</a> from itf_000100a2.o(i.ret_and_free) referenced from itf_000100a2.o(i.Itf_000100a2_new)
 <LI><a href="#[94]">ret_and_free</a> from itf_01000b04.o(i.ret_and_free) referenced from itf_01000b04.o(i.Itf_01000b04_new)
 <LI><a href="#[96]">ret_and_free</a> from itf_01000c20.o(i.ret_and_free) referenced from itf_01000c20.o(i.Itf_01000c20_new)
 <LI><a href="#[98]">ret_and_free</a> from itf_01000c21.o(i.ret_and_free) referenced from itf_01000c21.o(i.Itf_01000c21_new)
 <LI><a href="#[9a]">ret_and_free</a> from itf_01000c23.o(i.ret_and_free) referenced from itf_01000c23.o(i.Itf_01000c23_new)
 <LI><a href="#[f0]">rtn_and_free</a> from itf_00020000.o(i.rtn_and_free) referenced from itf_00020000.o(i.itf_00020000_new)
 <LI><a href="#[f2]">rtn_and_free</a> from itf_00020001.o(i.rtn_and_free) referenced from itf_00020001.o(i.itf_00020001_new)
 <LI><a href="#[f4]">rtn_and_free</a> from itf_00030000.o(i.rtn_and_free) referenced from itf_00030000.o(i.itf_00030000_new)
 <LI><a href="#[f6]">rtn_and_free</a> from itf_00030001.o(i.rtn_and_free) referenced from itf_00030001.o(i.itf_00030001_new)
 <LI><a href="#[f8]">rtn_and_free</a> from itf_00040000.o(i.rtn_and_free) referenced from itf_00040000.o(i.itf_00040000_new)
 <LI><a href="#[fa]">rtn_and_free</a> from itf_00040001.o(i.rtn_and_free) referenced from itf_00040001.o(i.itf_00040001_new)
 <LI><a href="#[fc]">rtn_and_free</a> from itf_00040010.o(i.rtn_and_free) referenced from itf_00040010.o(i.itf_00040010_new)
 <LI><a href="#[fe]">rtn_and_free</a> from itf_00040020.o(i.rtn_and_free) referenced from itf_00040020.o(i.itf_00040020_new)
 <LI><a href="#[100]">rtn_and_free</a> from itf_00040030.o(i.rtn_and_free) referenced from itf_00040030.o(i.itf_00040030_new)
 <LI><a href="#[10b]">run_auto_channel</a> from runze_sv04_new.o(i.run_auto_channel) referenced from runze_sv04_new.o(i.runze_new)
 <LI><a href="#[10c]">run_auto_channel_between</a> from runze_sv04_new.o(i.run_auto_channel_between) referenced from runze_sv04_new.o(i.runze_new)
 <LI><a href="#[109]">run_channel</a> from runze_sv04_new.o(i.run_channel) referenced from runze_sv04_new.o(i.runze_new)
 <LI><a href="#[10d]">run_channel_between</a> from runze_sv04_new.o(i.run_channel_between) referenced from runze_sv04_new.o(i.runze_new)
 <LI><a href="#[10a]">run_reset</a> from runze_sv04_new.o(i.run_reset) referenced from runze_sv04_new.o(i.runze_new)
 <LI><a href="#[115]">rv_ctrl_thread</a> from rv_thread.o(i.rv_ctrl_thread) referenced from rv_thread.o(i.rv_thread_init)
 <LI><a href="#[ed]">rx_packet_thread</a> from bus.o(i.rx_packet_thread) referenced from bus.o(i.bus_app_init)
 <LI><a href="#[11a]">timing_io_write</a> from io_mod.o(i.timing_io_write) referenced from io_mod.o(i.writable_io_new)
 <LI><a href="#[111]">uart0_bytes_send</a> from rv_cfg.o(i.uart0_bytes_send) referenced from rv_cfg.o(i.rv_hd_init)
 <LI><a href="#[114]">uart1_bytes_send</a> from rv_cfg.o(i.uart1_bytes_send) referenced from rv_cfg.o(i.rv_hd_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[11b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[11c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[11e]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[325]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[326]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[327]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[328]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[329]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[11f]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[144]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[121]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[123]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[125]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[32a]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[132]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[32b]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[127]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[32c]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[32d]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[129]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[32e]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[32f]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[330]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[331]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[332]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[12b]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[333]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[334]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[335]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[336]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[337]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[338]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[339]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[33a]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[33b]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[33c]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[33d]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[33e]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[33f]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[137]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[340]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[341]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[342]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[12d]"></a>__rt_lib_shutdown_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_heap_2 &rArr; _terminate_alloc &rArr; __Heap_Finalize &rArr; _mutex_free &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[343]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[344]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[345]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[346]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[347]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[11d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[348]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[12f]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[131]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[349]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[133]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; my_main &rArr; OSInit &rArr; OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[34a]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[165]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[136]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[34b]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[138]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34c]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc2.o(.emb_text), UNUSED)

<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[163]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[235]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteReadIf
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeqQueue_Enter
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeqQueue_Delete
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_p_map_serach
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_p_map_modify
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_p_map_insert
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_p_map_del
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_p_map_serach
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_p_map_older
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_p_map_insert
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_p_map_error
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_p_map_del_outdated
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_p_map_del
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_q_Enter
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_q_Delete
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_map_serach
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_map_insert
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_map_del
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_q_Enter
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_q_Delete
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_map_serach
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_map_insert
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_map_del
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_tree_post
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_tree_pend
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[238]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteReadIf
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeqQueue_Enter
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeqQueue_Delete
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_p_map_serach
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_p_map_modify
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_p_map_insert
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_p_map_del
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_p_map_serach
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_p_map_older
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_p_map_insert
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_p_map_error
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_p_map_del_outdated
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_p_map_del
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_q_Enter
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_q_Delete
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_map_serach
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_map_insert
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_map_del
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_q_Enter
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_q_Delete
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_map_serach
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_map_insert
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_map_del
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_tree_post
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_tree_pend
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[243]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[25f]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[237]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34d]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[34e]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>_malloc_internal</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[13d]"></a>malloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Thread
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writable_io_new
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_01000c23_new
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_01000c21_new
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_01000c20_new
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rv_thread_init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_01000b04_new
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_00010083_new
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_00010082_new
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_00010080_new
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_00010071_new
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_00010070_new
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_00010062_new
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_00010060_new
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_00010050_new
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_00010040_new
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_00010031_new
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_00010030_new
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_00010020_new
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_00010010_new
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_00010000_new
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runze_new
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_000100a2_new
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_000100a1_new
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_000100a0_new
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itf_00040030_new
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itf_00040020_new
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itf_00040010_new
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itf_00040001_new
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itf_00040000_new
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itf_00030001_new
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itf_00030000_new
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itf_00020001_new
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itf_00020000_new
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_BytesBufferNode
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BytesBufferNode_Destroy
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Firmware_ReportEvent
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_malloc
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_malloc
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtn_and_free
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtn_and_free
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_McuReset_Send
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_McuReset_Return
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_FirmWareVersionGet_Send
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_FirmWareVersionGet_Return
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_FirmWareTransmitFile_Send
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_FirmWareTransmitFile_Return
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_FirmWareReadyEvent_Send
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_FirmWareConfig_Send
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_FirmWareConfig_Return
</UL>

<P><STRONG><a name="[13f]"></a>_free_internal</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[140]"></a>free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = free &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Thread
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWare_Excute
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_seq_args
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rv_ctrl_thread
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BytesBufferNode_Destroy
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Firmware_ReportEvent
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_free
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_free
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtn_and_free
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtn_and_free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtn_and_free
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtn_and_free
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtn_and_free
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtn_and_free
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtn_and_free
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtn_and_free
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtn_and_free
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_McuReset_Send
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_McuReset_Return
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_FirmWareVersionGet_Send
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_FirmWareVersionGet_Return
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_FirmWareTransmitFile_Send
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_FirmWareTransmitFile_Return
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_FirmWareReadyEvent_Send
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_FirmWareConfig_Send
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_FirmWareConfig_Return
</UL>

<P><STRONG><a name="[141]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicMoveby
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_post_sem
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_pend_sem
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_create_thread
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Thread
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor3_state_machine
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor2_state_machine
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor1_state_machine
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor0_state_machine
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rcc_clk_enable
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DriverSetPostion
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_bytes_send
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_bytes_send
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_hd_write
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_signal_read_two
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_signal_read_average
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_signal_read_array
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_signal_read_ad_to_press_differ
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_signal_read_ad_to_press
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_signal_read_ad
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_signal_read
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_group_read_by
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_group_read_all
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_average_signal_read_old
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_average_signal_read
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_step_calc
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_distance_calc
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_thread_exe_extend
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sample_check_run
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Reagent_Data_Recieve
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Reagent_Check_Run
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Meagent_Suck_Start
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeOut_Reset
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cordinate_update
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_Reset
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_Init
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_cmd_run
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rv_cmd_run
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cmd_run
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWare_Excute
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_func_callback
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_func_broadcast
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_signal_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_ZeroTouch
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_run
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeqQueue_Enter
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_safe_insure
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_hb_send
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_channel_between
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_channel
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_auto_channel
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rev_frame_data_write
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_rev_frame_check_ok
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_make_send
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Write
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_for_driver_call
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_del_sem
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rv_ctrl_thread
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_SimpleMove
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_BackZero
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicMoveto
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicMoveRealPosition
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Firmware_ReportEvent
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_p_map_modify
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_p_map_insert
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_packet_thread
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_p_map_insert
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_callback_thread
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_map_insert
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_malloc
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_map_insert
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_frame_handle
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_insert
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_del
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_session_id
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_map_post
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_malloc
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_McuReset_Send
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_McuReset_Return
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_FirmWareVersionGet_Send
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_FirmWareVersionGet_Return
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_FirmWareTransmitFile_Send
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_FirmWareTransmitFile_Return
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_FirmWareReadyEvent_Send
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_FirmWareConfig_Send
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_FirmWareConfig_Return
</UL>

<P><STRONG><a name="[143]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[15b]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[122]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[124]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[34f]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeqQueue_Enter
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeqQueue_Delete
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteU32
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_make_send
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_for_driver_call
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_BytesBufferNode
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BytesBufferNode_Destroy
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteF32
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Firmware_ReportEvent
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteU16
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_simple_send
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtn_and_free
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtn_and_free
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
</UL>

<P><STRONG><a name="[146]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
</UL>

<P><STRONG><a name="[350]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonCmdExcute
</UL>

<P><STRONG><a name="[351]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[148]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[352]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[29a]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_malloc
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_malloc
</UL>

<P><STRONG><a name="[14b]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[353]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeqQueue_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Thread
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
</UL>

<P><STRONG><a name="[354]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[355]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[356]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[357]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[358]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[14e]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[128]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[150]"></a>__Heap_Initialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, h1_init_mt.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init_mt.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[359]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[15a]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[15c]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[126]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[142]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[147]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[15f]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[35a]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
</UL>

<P><STRONG><a name="[35b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[35c]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[35d]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[35e]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[35f]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[14d]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, h1_extend_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[156]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[15d]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[159]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[152]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[14f]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[130]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[12e]"></a>_terminate_alloc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, term_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = _terminate_alloc &rArr; __Heap_Finalize &rArr; _mutex_free &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_heap_2
</UL>

<P><STRONG><a name="[135]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[161]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[160]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[306]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[164]"></a>__Heap_Finalize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, h1_final_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __Heap_Finalize &rArr; _mutex_free &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[166]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __default_signal_display &rArr; _ttywrch &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[153]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[169]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[168]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[16a]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[16b]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[154]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[155]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[16c]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[245]"></a>App_TCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(i.App_TCBInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>

<P><STRONG><a name="[24b]"></a>App_TaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(i.App_TaskCreateHook))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
</UL>

<P><STRONG><a name="[250]"></a>App_TaskDelHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(i.App_TaskDelHook))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
</UL>

<P><STRONG><a name="[252]"></a>App_TaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(i.App_TaskIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>

<P><STRONG><a name="[255]"></a>App_TaskReturnHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(i.App_TaskReturnHook))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
</UL>

<P><STRONG><a name="[257]"></a>App_TaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(i.App_TaskStatHook))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
</UL>

<P><STRONG><a name="[25a]"></a>App_TaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(i.App_TaskSwHook))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>

<P><STRONG><a name="[178]"></a>App_TimeTickHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_hooks.o(i.App_TimeTickHook))
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>

<P><STRONG><a name="[1a4]"></a>BytesBufferNode_Append</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bytesbuffer.o(i.BytesBufferNode_Append))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Firmware_ReportEvent
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuReset_Send_ToBytes
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuReset_Return_ToBytes
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWareVersionGet_Send_ToBytes
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWareVersionGet_Return_ToBytes
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWareTransmitFile_Send_ToBytes
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWareTransmitFile_Return_ToBytes
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWareReadyEvent_Send_ToBytes
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWareConfig_Send_ToBytes
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWareConfig_Return_ToBytes
</UL>

<P><STRONG><a name="[17a]"></a>BytesBufferNode_Destroy</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, bytesbuffer.o(i.BytesBufferNode_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = BytesBufferNode_Destroy &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWare_Excute
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Firmware_ReportEvent
</UL>

<P><STRONG><a name="[27]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, bus_can_f4_hal.o(i.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; bus_for_driver_call &rArr; frame_q_Enter &rArr; frame_q_post &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_for_driver_call
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver_CAN_Receive
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver_CAN_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, bus_can_f4_hal.o(i.CAN1_SCE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN1_SCE_IRQHandler &rArr; CanDriver_CAN_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver_ClearITPendingBit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver_CAN_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[185]"></a>CanDriver_AddFilter</STRONG> (Thumb, 140 bytes, Stack size 12 bytes, candriver.o(i.CanDriver_AddFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CanDriver_AddFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver_Can1Init
</UL>

<P><STRONG><a name="[17c]"></a>CanDriver_CAN_GetITStatus</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, candriver.o(i.CanDriver_CAN_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CanDriver_CAN_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SCE_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[17d]"></a>CanDriver_CAN_Receive</STRONG> (Thumb, 244 bytes, Stack size 20 bytes, candriver.o(i.CanDriver_CAN_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CanDriver_CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[27b]"></a>CanDriver_CAN_Transmit</STRONG> (Thumb, 414 bytes, Stack size 24 bytes, candriver.o(i.CanDriver_CAN_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CanDriver_CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_driver_send
</UL>

<P><STRONG><a name="[181]"></a>CanDriver_Can1Init</STRONG> (Thumb, 544 bytes, Stack size 32 bytes, candriver.o(i.CanDriver_Can1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CanDriver_Can1Init &rArr; gpio_config
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver_AddFilter
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_nvic_set
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_config
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_adapter_init
</UL>

<P><STRONG><a name="[17f]"></a>CanDriver_ClearITPendingBit</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, candriver.o(i.CanDriver_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SCE_IRQHandler
</UL>

<P><STRONG><a name="[186]"></a>CommonCmdExcute</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, commonhandle.o(i.CommonCmdExcute))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = CommonCmdExcute &rArr; bus_ita_return &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteU32
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_func_callback
</UL>

<P><STRONG><a name="[18a]"></a>Delay_Nus</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mtmc5130driver.o(i.Delay_Nus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Delay_Nus &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DriverSetPostion
</UL>

<P><STRONG><a name="[18d]"></a>Delete_FirmWareConfig_Return</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protocols.o(i.Delete_FirmWareConfig_Return))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Delete_FirmWareConfig_Return &rArr; free &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWare_Excute
</UL>

<P><STRONG><a name="[18e]"></a>Delete_FirmWareConfig_Send</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protocols.o(i.Delete_FirmWareConfig_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Delete_FirmWareConfig_Send &rArr; free &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWare_Excute
</UL>

<P><STRONG><a name="[18f]"></a>Delete_FirmWareReadyEvent_Send</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protocols.o(i.Delete_FirmWareReadyEvent_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Delete_FirmWareReadyEvent_Send &rArr; free &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Firmware_ReportEvent
</UL>

<P><STRONG><a name="[190]"></a>Delete_FirmWareTransmitFile_Return</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protocols.o(i.Delete_FirmWareTransmitFile_Return))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Delete_FirmWareTransmitFile_Return &rArr; free &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWare_Excute
</UL>

<P><STRONG><a name="[191]"></a>Delete_FirmWareTransmitFile_Send</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protocols.o(i.Delete_FirmWareTransmitFile_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Delete_FirmWareTransmitFile_Send &rArr; free &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWare_Excute
</UL>

<P><STRONG><a name="[192]"></a>Delete_FirmWareVersionGet_Return</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protocols.o(i.Delete_FirmWareVersionGet_Return))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Delete_FirmWareVersionGet_Return &rArr; free &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWare_Excute
</UL>

<P><STRONG><a name="[193]"></a>Delete_FirmWareVersionGet_Send</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protocols.o(i.Delete_FirmWareVersionGet_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Delete_FirmWareVersionGet_Send &rArr; free &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWare_Excute
</UL>

<P><STRONG><a name="[194]"></a>Delete_McuReset_Return</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protocols.o(i.Delete_McuReset_Return))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Delete_McuReset_Return &rArr; free &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWare_Excute
</UL>

<P><STRONG><a name="[195]"></a>Delete_McuReset_Send</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protocols.o(i.Delete_McuReset_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Delete_McuReset_Send &rArr; free &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWare_Excute
</UL>

<P><STRONG><a name="[3b]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, motor_cfg.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; motor_zero_touch &rArr; mTMC5130Motor_ZeroTouch &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motor_cfg.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = EXTI1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; motor_zero_touch &rArr; mTMC5130Motor_ZeroTouch &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motor_cfg.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = EXTI3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; motor_zero_touch &rArr; mTMC5130Motor_ZeroTouch &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motor_cfg.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = EXTI4_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; motor_zero_touch &rArr; mTMC5130Motor_ZeroTouch &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, motor_cfg.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; motor_zero_touch &rArr; mTMC5130Motor_ZeroTouch &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[197]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART4_UART_Init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[1c1]"></a>FLASH_Erase_Sector</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_Erase_Sector))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[1c3]"></a>FLASH_FlushCaches</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_FlushCaches))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[198]"></a>FLASH_If_Erase</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, flash_f4.o(i.FLASH_If_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FLASH_If_Erase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWare_Excute
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SetProjectVersion
</UL>

<P><STRONG><a name="[19c]"></a>FLASH_If_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, flash_f4.o(i.FLASH_If_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_If_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWare_Excute
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SetProjectVersion
</UL>

<P><STRONG><a name="[19d]"></a>FLASH_If_Write</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, flash_f4.o(i.FLASH_If_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = FLASH_If_Write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWare_Excute
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SetProjectVersion
</UL>

<P><STRONG><a name="[19f]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[ce]"></a>FirmWareConfig_Return_GetFromBytes</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, protocols.o(i.FirmWareConfig_Return_GetFromBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FirmWareConfig_Return_GetFromBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadU32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocols.o(i.New_FirmWareConfig_Return)
</UL>
<P><STRONG><a name="[cd]"></a>FirmWareConfig_Return_ToBytes</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, protocols.o(i.FirmWareConfig_Return_ToBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = FirmWareConfig_Return_ToBytes &rArr; New_BytesBufferNode &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_BytesBufferNode
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BytesBufferNode_Append
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocols.o(i.New_FirmWareConfig_Return)
</UL>
<P><STRONG><a name="[d0]"></a>FirmWareConfig_Send_GetFromBytes</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, protocols.o(i.FirmWareConfig_Send_GetFromBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FirmWareConfig_Send_GetFromBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadU32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocols.o(i.New_FirmWareConfig_Send)
</UL>
<P><STRONG><a name="[cf]"></a>FirmWareConfig_Send_ToBytes</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, protocols.o(i.FirmWareConfig_Send_ToBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = FirmWareConfig_Send_ToBytes &rArr; New_BytesBufferNode &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_BytesBufferNode
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BytesBufferNode_Append
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocols.o(i.New_FirmWareConfig_Send)
</UL>
<P><STRONG><a name="[d2]"></a>FirmWareReadyEvent_Send_GetFromBytes</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, protocols.o(i.FirmWareReadyEvent_Send_GetFromBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FirmWareReadyEvent_Send_GetFromBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadU32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocols.o(i.New_FirmWareReadyEvent_Send)
</UL>
<P><STRONG><a name="[d1]"></a>FirmWareReadyEvent_Send_ToBytes</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, protocols.o(i.FirmWareReadyEvent_Send_ToBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = FirmWareReadyEvent_Send_ToBytes &rArr; New_BytesBufferNode &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_BytesBufferNode
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BytesBufferNode_Append
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocols.o(i.New_FirmWareReadyEvent_Send)
</UL>
<P><STRONG><a name="[d4]"></a>FirmWareTransmitFile_Return_GetFromBytes</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, protocols.o(i.FirmWareTransmitFile_Return_GetFromBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FirmWareTransmitFile_Return_GetFromBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadU32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocols.o(i.New_FirmWareTransmitFile_Return)
</UL>
<P><STRONG><a name="[d3]"></a>FirmWareTransmitFile_Return_ToBytes</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, protocols.o(i.FirmWareTransmitFile_Return_ToBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = FirmWareTransmitFile_Return_ToBytes &rArr; New_BytesBufferNode &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_BytesBufferNode
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BytesBufferNode_Append
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocols.o(i.New_FirmWareTransmitFile_Return)
</UL>
<P><STRONG><a name="[d6]"></a>FirmWareTransmitFile_Send_GetFromBytes</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, protocols.o(i.FirmWareTransmitFile_Send_GetFromBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FirmWareTransmitFile_Send_GetFromBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadU32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocols.o(i.New_FirmWareTransmitFile_Send)
</UL>
<P><STRONG><a name="[d5]"></a>FirmWareTransmitFile_Send_ToBytes</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, protocols.o(i.FirmWareTransmitFile_Send_ToBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = FirmWareTransmitFile_Send_ToBytes &rArr; New_BytesBufferNode &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_BytesBufferNode
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BytesBufferNode_Append
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocols.o(i.New_FirmWareTransmitFile_Send)
</UL>
<P><STRONG><a name="[d8]"></a>FirmWareVersionGet_Return_GetFromBytes</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, protocols.o(i.FirmWareVersionGet_Return_GetFromBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FirmWareVersionGet_Return_GetFromBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadU32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocols.o(i.New_FirmWareVersionGet_Return)
</UL>
<P><STRONG><a name="[d7]"></a>FirmWareVersionGet_Return_ToBytes</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, protocols.o(i.FirmWareVersionGet_Return_ToBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = FirmWareVersionGet_Return_ToBytes &rArr; New_BytesBufferNode &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_BytesBufferNode
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BytesBufferNode_Append
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocols.o(i.New_FirmWareVersionGet_Return)
</UL>
<P><STRONG><a name="[da]"></a>FirmWareVersionGet_Send_GetFromBytes</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, protocols.o(i.FirmWareVersionGet_Send_GetFromBytes))
<BR>[Address Reference Count : 1]<UL><LI> protocols.o(i.New_FirmWareVersionGet_Send)
</UL>
<P><STRONG><a name="[d9]"></a>FirmWareVersionGet_Send_ToBytes</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, protocols.o(i.FirmWareVersionGet_Send_ToBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = FirmWareVersionGet_Send_ToBytes &rArr; New_BytesBufferNode &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_BytesBufferNode
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BytesBufferNode_Append
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocols.o(i.New_FirmWareVersionGet_Send)
</UL>
<P><STRONG><a name="[1a5]"></a>FirmWare_Excute</STRONG> (Thumb, 578 bytes, Stack size 40 bytes, firmwaeexcute.o(i.FirmWare_Excute))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = FirmWare_Excute &rArr; Firmware_ReportEvent &rArr; bus_ita_hb_send &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SetProjectVersion
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_GetProjectVersion
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ContainsApp
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Write
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Erase
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BytesBufferNode_Destroy
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Firmware_ReportEvent
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_McuReset_Send
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_McuReset_Return
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_FirmWareVersionGet_Send
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_FirmWareVersionGet_Return
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_FirmWareTransmitFile_Send
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_FirmWareTransmitFile_Return
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_FirmWareConfig_Send
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_FirmWareConfig_Return
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_McuReset_Send
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_McuReset_Return
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_FirmWareVersionGet_Send
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_FirmWareVersionGet_Return
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_FirmWareTransmitFile_Send
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_FirmWareTransmitFile_Return
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_FirmWareConfig_Send
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_FirmWareConfig_Return
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_func_callback
</UL>

<P><STRONG><a name="[1ac]"></a>Firmware_ReportEvent</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, firmwaeexcute.o(i.Firmware_ReportEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = Firmware_ReportEvent &rArr; bus_ita_hb_send &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_hb_send
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BytesBufferNode_Destroy
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BytesBufferNode_Append
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_FirmWareReadyEvent_Send
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_FirmWareReadyEvent_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWare_Excute
</UL>

<P><STRONG><a name="[1ab]"></a>Flash_ContainsApp</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, flash_f4.o(i.Flash_ContainsApp))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWare_Excute
</UL>

<P><STRONG><a name="[1b5]"></a>Flash_GetAddress</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, flash_f4.o(i.Flash_GetAddress))
<BR><BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SetProjectVersion
</UL>

<P><STRONG><a name="[1b6]"></a>Flash_GetBootVersion</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, flash_f4.o(i.Flash_GetBootVersion))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SetProjectVersion
</UL>

<P><STRONG><a name="[1a8]"></a>Flash_GetProjectVersion</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, flash_f4.o(i.Flash_GetProjectVersion))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWare_Excute
</UL>

<P><STRONG><a name="[1ad]"></a>Flash_SetProjectVersion</STRONG> (Thumb, 60 bytes, Stack size 64 bytes, flash_f4.o(i.Flash_SetProjectVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = Flash_SetProjectVersion &rArr; FLASH_If_Write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_GetAddress
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_GetBootVersion
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Write
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWare_Excute
</UL>

<P><STRONG><a name="[2c3]"></a>Get_ISR_ID</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, mtmc5130device.o(i.Get_ISR_ID))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_io_read
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2_io_read
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m1_io_read
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m0_io_read
</UL>

<P><STRONG><a name="[205]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 362 bytes, Stack size 12 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[16d]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
</UL>

<P><STRONG><a name="[16f]"></a>HAL_ADC_ConvHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ConvHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAHalfConvCplt
</UL>

<P><STRONG><a name="[16e]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAError
</UL>

<P><STRONG><a name="[1b7]"></a>HAL_ADC_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[1b8]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, stm32f4xx_hal_msp.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[1bc]"></a>HAL_ADC_Start_DMA</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_signal_hd_init
</UL>

<P><STRONG><a name="[1bb]"></a>HAL_DMA_Init</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[1bd]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[19a]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, stm32f4xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Erase
</UL>

<P><STRONG><a name="[19b]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Write
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Erase
</UL>

<P><STRONG><a name="[19e]"></a>HAL_FLASH_Program</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Word
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_HalfWord
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Write
</UL>

<P><STRONG><a name="[199]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Write
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Erase
</UL>

<P><STRONG><a name="[1c8]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, motor_cfg.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; motor_zero_touch &rArr; mTMC5130Motor_ZeroTouch &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_zero_touch
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_position_reach
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[196]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; motor_zero_touch &rArr; mTMC5130Motor_ZeroTouch &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[1ba]"></a>HAL_GPIO_Init</STRONG> (Thumb, 518 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_io_write
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_io_read
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2_io_write
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2_io_read
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m1_io_write
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m1_io_read
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m0_io_write
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m0_io_read
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[2c4]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mGPIOReadPin
</UL>

<P><STRONG><a name="[1e7]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[176]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_error_write
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Thread
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_io_write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2_io_write
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m1_io_write
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m0_io_write
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_hd_write
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_run
</UL>

<P><STRONG><a name="[1a0]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[179]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimeTickHook
</UL>

<P><STRONG><a name="[1cb]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_Init &rArr; HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1cd]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1ce]"></a>HAL_MspInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1dc]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_io_read
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2_io_read
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m1_io_read
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m0_io_read
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[1d0]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 98 bytes, Stack size 4 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_io_read
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2_io_read
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m1_io_read
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m0_io_read
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1cc]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[1d1]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1d4]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[1d3]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1d5]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1d2]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 126 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[1d6]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 928 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1d7]"></a>HAL_SPI_Init</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[1d8]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[26b]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1cf]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[209]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 102 bytes, Stack size 4 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[1d9]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[1da]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[20f]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sample_suck_start
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Meagent_Suck_Start
</UL>

<P><STRONG><a name="[26d]"></a>HAL_TIM_Base_Stop_IT</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Stop_IT))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[1dd]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_ConfigClockSource
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[1e2]"></a>HAL_UART_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART4_UART_Init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[1e3]"></a>HAL_UART_MspInit</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, stm32f4xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1e5]"></a>HAL_UART_Transmit</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_bytes_send
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_bytes_send
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>

<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, thread_safe.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = HardFault_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e8]"></a>Itf_00010000_new</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, itf_00010000.o(i.Itf_00010000_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Itf_00010000_new &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_run
</UL>

<P><STRONG><a name="[1e9]"></a>Itf_00010010_new</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, itf_00010010.o(i.Itf_00010010_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Itf_00010010_new &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_run
</UL>

<P><STRONG><a name="[1ea]"></a>Itf_00010020_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, itf_00010020 .o(i.Itf_00010020_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Itf_00010020_new &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_run
</UL>

<P><STRONG><a name="[1eb]"></a>Itf_00010030_new</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, itf_00010030 .o(i.Itf_00010030_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Itf_00010030_new &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_run
</UL>

<P><STRONG><a name="[1ec]"></a>Itf_00010031_new</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, itf_00010031.o(i.Itf_00010031_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Itf_00010031_new &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_run
</UL>

<P><STRONG><a name="[1ed]"></a>Itf_00010040_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, itf_00010040 .o(i.Itf_00010040_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Itf_00010040_new &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_run
</UL>

<P><STRONG><a name="[1ee]"></a>Itf_00010050_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, itf_00010050.o(i.Itf_00010050_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Itf_00010050_new &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_run
</UL>

<P><STRONG><a name="[1ef]"></a>Itf_00010060_new</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, itf_00010060.o(i.Itf_00010060_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Itf_00010060_new &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_run
</UL>

<P><STRONG><a name="[1f0]"></a>Itf_00010062_new</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, itf_00010062.o(i.Itf_00010062_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Itf_00010062_new &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_run
</UL>

<P><STRONG><a name="[1f1]"></a>Itf_00010070_new</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, itf_00010070.o(i.Itf_00010070_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Itf_00010070_new &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_run
</UL>

<P><STRONG><a name="[1f2]"></a>Itf_00010071_new</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, itf_00010071.o(i.Itf_00010071_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Itf_00010071_new &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_run
</UL>

<P><STRONG><a name="[1f3]"></a>Itf_00010080_new</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, itf_00010080.o(i.Itf_00010080_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Itf_00010080_new &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_run
</UL>

<P><STRONG><a name="[1f4]"></a>Itf_00010082_new</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, itf_00010082.o(i.Itf_00010082_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Itf_00010082_new &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_run
</UL>

<P><STRONG><a name="[1f5]"></a>Itf_00010083_new</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, itf_00010083.o(i.Itf_00010083_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Itf_00010083_new &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_run
</UL>

<P><STRONG><a name="[1f6]"></a>Itf_000100a0_new</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, itf_000100a0.o(i.Itf_000100a0_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Itf_000100a0_new &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rv_cmd_run
</UL>

<P><STRONG><a name="[1f7]"></a>Itf_000100a1_new</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, itf_000100a1.o(i.Itf_000100a1_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Itf_000100a1_new &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rv_cmd_run
</UL>

<P><STRONG><a name="[1f8]"></a>Itf_000100a2_new</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, itf_000100a2.o(i.Itf_000100a2_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Itf_000100a2_new &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rv_cmd_run
</UL>

<P><STRONG><a name="[1f9]"></a>Itf_01000b04_new</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, itf_01000b04.o(i.Itf_01000b04_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Itf_01000b04_new &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_run
</UL>

<P><STRONG><a name="[1fa]"></a>Itf_01000c20_new</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, itf_01000c20.o(i.Itf_01000c20_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Itf_01000c20_new &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_extend
</UL>

<P><STRONG><a name="[1fb]"></a>Itf_01000c21_new</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, itf_01000c21.o(i.Itf_01000c21_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Itf_01000c21_new &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_extend
</UL>

<P><STRONG><a name="[1fc]"></a>Itf_01000c23_new</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, itf_01000c23.o(i.Itf_01000c23_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Itf_01000c23_new &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_extend
</UL>

<P><STRONG><a name="[1fd]"></a>KalmanFilter</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, kalman.o(i.KalmanFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = KalmanFilter &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_thread_exe_extend
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sample_check_run
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Reagent_Check_Run
</UL>

<P><STRONG><a name="[dc]"></a>McuReset_Return_GetFromBytes</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, protocols.o(i.McuReset_Return_GetFromBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = McuReset_Return_GetFromBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadU32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocols.o(i.New_McuReset_Return)
</UL>
<P><STRONG><a name="[db]"></a>McuReset_Return_ToBytes</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, protocols.o(i.McuReset_Return_ToBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = McuReset_Return_ToBytes &rArr; New_BytesBufferNode &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_BytesBufferNode
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BytesBufferNode_Append
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocols.o(i.New_McuReset_Return)
</UL>
<P><STRONG><a name="[de]"></a>McuReset_Send_GetFromBytes</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, protocols.o(i.McuReset_Send_GetFromBytes))
<BR>[Address Reference Count : 1]<UL><LI> protocols.o(i.New_McuReset_Send)
</UL>
<P><STRONG><a name="[dd]"></a>McuReset_Send_ToBytes</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, protocols.o(i.McuReset_Send_ToBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = McuReset_Send_ToBytes &rArr; New_BytesBufferNode &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_BytesBufferNode
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BytesBufferNode_Append
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocols.o(i.New_McuReset_Send)
</UL>
<P><STRONG><a name="[170]"></a>MotorInit</STRONG> (Thumb, 558 bytes, Stack size 104 bytes, motor_cfg.o(i.MotorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = MotorInit &rArr; mTMC5130Motor_Init &rArr; mTMC5130Device_Init &rArr; mTMC5130Driver_Init &rArr; mTMC5130DriverSetDefaultRegister &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_create_sem
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_create_thread
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeqQueue_Init
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cordinate_update
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[c4]"></a>Motor_Thread</STRONG> (Thumb, 2746 bytes, Stack size 48 bytes, motor_thread.o(i.Motor_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = Motor_Thread &rArr; motor_thread_exe_extend &rArr; module_sample_suck_start &rArr; motor_step_calc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_error_write
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_move_done_notify
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_step_calc
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_distance_calc
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_thread_exe_extend
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_motor_seq_move_start
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeqQueue_GetSize
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_seq_args
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeqQueue_Waite
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeqQueue_Delete
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[1a3]"></a>New_BytesBufferNode</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bytesbuffer.o(i.New_BytesBufferNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = New_BytesBufferNode &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuReset_Send_ToBytes
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuReset_Return_ToBytes
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWareVersionGet_Send_ToBytes
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWareVersionGet_Return_ToBytes
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWareTransmitFile_Send_ToBytes
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWareTransmitFile_Return_ToBytes
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWareReadyEvent_Send_ToBytes
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWareConfig_Send_ToBytes
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWareConfig_Return_ToBytes
</UL>

<P><STRONG><a name="[1aa]"></a>New_FirmWareConfig_Return</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, protocols.o(i.New_FirmWareConfig_Return))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = New_FirmWareConfig_Return &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWare_Excute
</UL>

<P><STRONG><a name="[1a9]"></a>New_FirmWareConfig_Send</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, protocols.o(i.New_FirmWareConfig_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = New_FirmWareConfig_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWare_Excute
</UL>

<P><STRONG><a name="[1b3]"></a>New_FirmWareReadyEvent_Send</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, protocols.o(i.New_FirmWareReadyEvent_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = New_FirmWareReadyEvent_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Firmware_ReportEvent
</UL>

<P><STRONG><a name="[1af]"></a>New_FirmWareTransmitFile_Return</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, protocols.o(i.New_FirmWareTransmitFile_Return))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = New_FirmWareTransmitFile_Return &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWare_Excute
</UL>

<P><STRONG><a name="[1ae]"></a>New_FirmWareTransmitFile_Send</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, protocols.o(i.New_FirmWareTransmitFile_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = New_FirmWareTransmitFile_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWare_Excute
</UL>

<P><STRONG><a name="[1a7]"></a>New_FirmWareVersionGet_Return</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, protocols.o(i.New_FirmWareVersionGet_Return))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = New_FirmWareVersionGet_Return &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWare_Excute
</UL>

<P><STRONG><a name="[1a6]"></a>New_FirmWareVersionGet_Send</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, protocols.o(i.New_FirmWareVersionGet_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = New_FirmWareVersionGet_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWare_Excute
</UL>

<P><STRONG><a name="[1b2]"></a>New_McuReset_Return</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, protocols.o(i.New_McuReset_Return))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = New_McuReset_Return &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWare_Excute
</UL>

<P><STRONG><a name="[1b1]"></a>New_McuReset_Send</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, protocols.o(i.New_McuReset_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = New_McuReset_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWare_Excute
</UL>

<P><STRONG><a name="[22a]"></a>OSInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, os_core.o(i.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
</UL>

<P><STRONG><a name="[22b]"></a>OSInitHookBegin</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookBegin))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[233]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookEnd))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[234]"></a>OSIntExit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(i.OSIntExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[18b]"></a>OSSchedLock</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, os_core.o(i.OSSchedLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSSchedLock
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Nus
</UL>

<P><STRONG><a name="[18c]"></a>OSSchedUnlock</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, os_core.o(i.OSSchedUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Nus
</UL>

<P><STRONG><a name="[23a]"></a>OSSemCreate</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, os_sem.o(i.OSSemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_create_sem
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicWait_Sem
</UL>

<P><STRONG><a name="[23c]"></a>OSSemDel</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, os_sem.o(i.OSSemDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OSSemDel &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicWait_Sem
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_del_sem
</UL>

<P><STRONG><a name="[23e]"></a>OSSemPend</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, os_sem.o(i.OSSemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_pend_sem
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicWait_Sem
</UL>

<P><STRONG><a name="[241]"></a>OSSemPost</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, os_sem.o(i.OSSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_post_sem
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130ProcessSemPost
</UL>

<P><STRONG><a name="[242]"></a>OSStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(i.OSStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
</UL>

<P><STRONG><a name="[244]"></a>OSTCBInitHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTCBInitHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTCBInitHook
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[246]"></a>OSTaskCreateExt</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, os_task.o(i.OSTaskCreateExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_create_thread
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
</UL>

<P><STRONG><a name="[24a]"></a>OSTaskCreateHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskCreateHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCreateHook
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[24c]"></a>OSTaskDel</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, os_task.o(i.OSTaskDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = OSTaskDel &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[24f]"></a>OSTaskDelHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskDelHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskDelHook
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskDelHook
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[251]"></a>OSTaskIdleHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskIdleHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskIdleHook
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskIdleHook
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[253]"></a>OSTaskNameSet</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, os_task.o(i.OSTaskNameSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
</UL>

<P><STRONG><a name="[254]"></a>OSTaskReturnHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskReturnHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskReturnHook
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskReturnHook
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[256]"></a>OSTaskStatHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskStatHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskStatHook
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStatHook
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[258]"></a>OSTaskStkChk</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, os_task.o(i.OSTaskStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[248]"></a>OSTaskStkInit</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, os_cpu_c.o(i.OSTaskStkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[259]"></a>OSTaskSuspend</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, os_task.o(i.OSTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[66]"></a>OSTaskSwHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskSwHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskSwHook
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskSwHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[177]"></a>OSTimeDly</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, os_time.o(i.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_sleep
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_thread_exe_extend
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[21b]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, os_time.o(i.OSTimeDlyHMSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor3_state_machine
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor3_listen_io
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor3_listen_event
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor2_state_machine
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor2_listen_io
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor2_listen_event
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor1_state_machine
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor1_listen_io
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor1_listen_event
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor0_state_machine
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor0_listen_io
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor0_listen_event
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Driver_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_SeqMove
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicWait_Sem
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_MoveEvent
</UL>

<P><STRONG><a name="[25b]"></a>OSTimeGet</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, os_time.o(i.OSTimeGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_time_get
</UL>

<P><STRONG><a name="[25c]"></a>OSTimeTick</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, os_core.o(i.OSTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeTick &rArr; OSTimeTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[25d]"></a>OSTimeTickHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTimeTickHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTimeTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[24e]"></a>OS_Dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_core.o(i.OS_Dummy))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[23d]"></a>OS_EventTaskRdy</STRONG> (Thumb, 132 bytes, Stack size 36 bytes, os_core.o(i.OS_EventTaskRdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
</UL>

<P><STRONG><a name="[240]"></a>OS_EventTaskRemove</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, os_core.o(i.OS_EventTaskRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[24d]"></a>OS_EventTaskRemoveMulti</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, os_core.o(i.OS_EventTaskRemoveMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_EventTaskRemoveMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[23f]"></a>OS_EventTaskWait</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(i.OS_EventTaskWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[23b]"></a>OS_EventWaitListInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(i.OS_EventWaitListInit))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>

<P><STRONG><a name="[25e]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(i.OS_MemClr))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>

<P><STRONG><a name="[230]"></a>OS_QInit</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, os_q.o(i.OS_QInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[239]"></a>OS_Sched</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, os_core.o(i.OS_Sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
</UL>

<P><STRONG><a name="[249]"></a>OS_TCBInit</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, os_core.o(i.OS_TCBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[e0]"></a>OS_TaskIdle</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_TaskIdle &rArr; OSTaskIdleHook
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_InitTaskIdle)
</UL>
<P><STRONG><a name="[df]"></a>OS_TaskReturn</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_task.o(i.OS_TaskReturn))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = OS_TaskReturn &rArr; OSTaskDel &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_c.o(i.OSTaskStkInit)
</UL>
<P><STRONG><a name="[e1]"></a>OS_TaskStat</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_InitTaskStat)
</UL>
<P><STRONG><a name="[260]"></a>OS_TaskStatStkChk</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, os_core.o(i.OS_TaskStatStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[247]"></a>OS_TaskStkClr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_task.o(i.OS_TaskStkClr))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[2f7]"></a>ReadF32</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tool.o(i.ReadF32))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
</UL>

<P><STRONG><a name="[2a2]"></a>ReadU16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tool.o(i.ReadU16))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_rev_frame_check_ok
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_insert
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
</UL>

<P><STRONG><a name="[1a2]"></a>ReadU32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tool.o(i.ReadU32))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_func_callback
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_insert
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_parse
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuReset_Return_GetFromBytes
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWareVersionGet_Return_GetFromBytes
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWareTransmitFile_Send_GetFromBytes
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWareTransmitFile_Return_GetFromBytes
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWareReadyEvent_Send_GetFromBytes
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWareConfig_Send_GetFromBytes
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWareConfig_Return_GetFromBytes
</UL>

<P><STRONG><a name="[222]"></a>SeqQueue_Delete</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, data_struct.o(i.SeqQueue_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = SeqQueue_Delete &rArr; ds_free &rArr; free &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_free
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Thread
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rv_ctrl_thread
</UL>

<P><STRONG><a name="[268]"></a>SeqQueue_Enter</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, data_struct.o(i.SeqQueue_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = SeqQueue_Enter &rArr; ds_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_malloc
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_ele_enter
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_ele_enter
</UL>

<P><STRONG><a name="[223]"></a>SeqQueue_GetSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, data_struct.o(i.SeqQueue_GetSize))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Thread
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rv_ctrl_thread
</UL>

<P><STRONG><a name="[220]"></a>SeqQueue_Init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, data_struct.o(i.SeqQueue_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SeqQueue_Init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rv_thread_init
</UL>

<P><STRONG><a name="[221]"></a>SeqQueue_Waite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, data_struct.o(i.SeqQueue_Waite))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Thread
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rv_ctrl_thread
</UL>

<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, os_cpu_c.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; OSTimeTick &rArr; OSTimeTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26a]"></a>SystemClock_Config</STRONG> (Thumb, 150 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>SystemInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[2f]"></a>TIM2_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, motor_cmd_extend.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = TIM2_IRQHandler &rArr; module_sample_check_run &rArr; motor_distance_calc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sample_check_run
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Reagent_Check_Run
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1db]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[47]"></a>UART4_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rv_cfg.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART3_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rv_cfg.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26e]"></a>WriteF32</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tool.o(i.WriteF32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteF32
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
</UL>

<P><STRONG><a name="[26f]"></a>WriteU16</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tool.o(i.WriteU16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteU16
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_simple_send
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtn_and_free
</UL>

<P><STRONG><a name="[187]"></a>WriteU32</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tool.o(i.WriteU32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteU32
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonCmdExcute
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_simple_send
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtn_and_free
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtn_and_free
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtn_and_free
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtn_and_free
</UL>

<P><STRONG><a name="[158]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[102]"></a>_mutex_acquire</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, thread_safe.o(i._mutex_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_safe.o(i.malloc_safe_insure)
</UL>
<P><STRONG><a name="[104]"></a>_mutex_free</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread_safe.o(i._mutex_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _mutex_free &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_safe.o(i.malloc_safe_insure)
</UL>
<P><STRONG><a name="[101]"></a>_mutex_initialize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_safe.o(i._mutex_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_safe.o(i.malloc_safe_insure)
</UL>
<P><STRONG><a name="[103]"></a>_mutex_release</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread_safe.o(i._mutex_release))
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_safe.o(i.malloc_safe_insure)
</UL>
<P><STRONG><a name="[139]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, thread_safe.o(i._sys_exit))
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[167]"></a>_ttywrch</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, thread_safe.o(i._ttywrch))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _ttywrch &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[270]"></a>ack_map_del</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, bus.o(i.ack_map_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = ack_map_del
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_map_key_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_map_erase
</UL>

<P><STRONG><a name="[275]"></a>ack_map_insert</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, bus.o(i.ack_map_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = ack_map_insert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_map_set
</UL>

<P><STRONG><a name="[277]"></a>ack_map_serach</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, bus.o(i.ack_map_serach))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = ack_map_serach
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_map_key_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_map_post
</UL>

<P><STRONG><a name="[279]"></a>ad_signal_hd_init</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ad_signal_cfg.o(i.ad_signal_hd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ad_signal_hd_init &rArr; HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_signal_init
</UL>

<P><STRONG><a name="[173]"></a>ad_signal_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ad_signal.o(i.ad_signal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ad_signal_init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_signal_hd_init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[174]"></a>bus_adapter_add</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bus.o(i.bus_adapter_add))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[175]"></a>bus_app_init</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, bus.o(i.bus_app_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = bus_app_init &rArr; bus_create_thread &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_create_sem
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_create_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[21e]"></a>bus_create_thread</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, os_implement.o(i.bus_create_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = bus_create_thread &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rv_thread_init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_app_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_thread_create
</UL>

<P><STRONG><a name="[27a]"></a>bus_driver_send</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, bus_can_f4_hal.o(i.bus_driver_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bus_driver_send &rArr; CanDriver_CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver_CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_adapter_send
</UL>

<P><STRONG><a name="[17e]"></a>bus_for_driver_call</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, bus.o(i.bus_for_driver_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = bus_for_driver_call &rArr; frame_q_Enter &rArr; frame_q_post &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_q_Enter
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[6c]"></a>bus_ita_func_broadcast</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, my_callback.o(i.bus_ita_func_broadcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = bus_ita_func_broadcast &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_main.o(i.AppTaskStart)
</UL>
<P><STRONG><a name="[6d]"></a>bus_ita_func_callback</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, my_callback.o(i.bus_ita_func_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = bus_ita_func_callback &rArr; FirmWare_Excute &rArr; Firmware_ReportEvent &rArr; bus_ita_hb_send &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_func_callback_extern
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_cmd_run
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rv_cmd_run
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cmd_run
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return_unkonw_cmd
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadU32
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWare_Excute
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonCmdExcute
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_run
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_main.o(i.AppTaskStart)
</UL>
<P><STRONG><a name="[27d]"></a>bus_ita_func_callback_extern</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, motor_cmd_extend.o(i.bus_ita_func_callback_extern))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = bus_ita_func_callback_extern &rArr; motor_cmd_extend &rArr; queue_ele_enter &rArr; SeqQueue_Enter &rArr; ds_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_extend
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_func_callback
</UL>

<P><STRONG><a name="[1b4]"></a>bus_ita_hb_send</STRONG> (Thumb, 516 bytes, Stack size 80 bytes, bus.o(i.bus_ita_hb_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = bus_ita_hb_send &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_pend_sem
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_create_sem
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_del_sem
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_p_map_serach
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_p_map_insert
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_p_map_del
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_set
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_del
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_session_id
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_session_id
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_simple_send
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_map_set
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_map_erase
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Firmware_ReportEvent
</UL>

<P><STRONG><a name="[189]"></a>bus_ita_return</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, bus.o(i.bus_ita_return))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = bus_ita_return &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_pend_sem
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_create_sem
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_del_sem
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_p_map_del
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_simple_send
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_map_set
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_map_erase
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWare_Excute
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonCmdExcute
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtn_and_free
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtn_and_free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtn_and_free
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtn_and_free
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtn_and_free
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtn_and_free
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtn_and_free
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtn_and_free
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_and_free
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtn_and_free
</UL>

<P><STRONG><a name="[28e]"></a>bus_ita_return_send_err</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bus.o(i.bus_ita_return_send_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = bus_ita_return_send_err &rArr; rx_p_map_del
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_p_map_del
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return_unkonw_cmd
</UL>

<P><STRONG><a name="[27e]"></a>bus_ita_return_unkonw_cmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bus.o(i.bus_ita_return_unkonw_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = bus_ita_return_unkonw_cmd &rArr; bus_ita_return_send_err &rArr; rx_p_map_del
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return_send_err
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_func_callback
</UL>

<P><STRONG><a name="[21f]"></a>bus_os_create_sem</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, os_implement.o(i.bus_os_create_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = bus_os_create_sem &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorInit
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Driver_Init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rv_thread_init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_app_init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_hb_send
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runze_new
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
</UL>

<P><STRONG><a name="[288]"></a>bus_os_del_sem</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, os_implement.o(i.bus_os_del_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = bus_os_del_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_hb_send
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
</UL>

<P><STRONG><a name="[273]"></a>bus_os_pend_sem</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, os_implement.o(i.bus_os_pend_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = bus_os_pend_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue3_pend
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue2_pend
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue1_pend
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue0_pend
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue1_pend
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue0_pend
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_hb_send
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_make_send_wait
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_q_pend
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_q_pend
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_tree_pend
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_session_id
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_simple_send
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_map_set
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_map_post
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_map_erase
</UL>

<P><STRONG><a name="[274]"></a>bus_os_post_sem</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, os_implement.o(i.bus_os_post_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue3_post
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue2_post
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue1_post
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue0_post
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue1_post
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue0_post
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byte_rev
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_q_post
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_q_post
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_tree_post
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_insert
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_session_id
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_simple_send
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_map_set
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_map_post
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_map_erase
</UL>

<P><STRONG><a name="[28f]"></a>bus_os_sleep</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, os_implement.o(i.bus_os_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = bus_os_sleep &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_zero_no_trig
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_simple_send
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timing_io_write
</UL>

<P><STRONG><a name="[290]"></a>bus_os_time_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_implement.o(i.bus_os_time_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = bus_os_time_get &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_p_map_insert
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_p_map_del_outdated
</UL>

<P><STRONG><a name="[291]"></a>bus_packet_alloc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bus.o(i.bus_packet_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = bus_packet_alloc &rArr; my_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_insert
</UL>

<P><STRONG><a name="[2a4]"></a>bus_packet_copy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bus.o(i.bus_packet_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bus_packet_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_insert
</UL>

<P><STRONG><a name="[293]"></a>bus_packet_del</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bus.o(i.bus_packet_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = bus_packet_del &rArr; my_free &rArr; free &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_callback_thread
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_insert
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_del
</UL>

<P><STRONG><a name="[6a]"></a>can_adapter_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bus_can_f4_hal.o(i.can_adapter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = can_adapter_init &rArr; CanDriver_Can1Init &rArr; gpio_config
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver_Can1Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_main.o(i.AppTaskStart)
</UL>
<P><STRONG><a name="[6b]"></a>can_adapter_send</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, bus_can_f4_hal.o(i.can_adapter_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = can_adapter_send &rArr; bus_driver_send &rArr; CanDriver_CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_driver_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_main.o(i.AppTaskStart)
</UL>
<P><STRONG><a name="[1b0]"></a>crc32</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tool.o(i.crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = crc32 &rArr; make_table
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmWare_Excute
</UL>

<P><STRONG><a name="[2c5]"></a>delayUs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, delayus.o(i.delayUs))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mGPIOReadPin
</UL>

<P><STRONG><a name="[267]"></a>ds_free</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, data_struct.o(i.ds_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ds_free &rArr; free &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeqQueue_Delete
</UL>

<P><STRONG><a name="[269]"></a>ds_malloc</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, data_struct.o(i.ds_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = ds_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeqQueue_Enter
</UL>

<P><STRONG><a name="[15e]"></a>ferror</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread_safe.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[67]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, thread_safe.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[2af]"></a>frame_q_Delete</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, bus.o(i.frame_q_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = frame_q_Delete
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_packet_thread
</UL>

<P><STRONG><a name="[27c]"></a>frame_q_Enter</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, bus.o(i.frame_q_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = frame_q_Enter &rArr; frame_q_post &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_q_post
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_for_driver_call
</UL>

<P><STRONG><a name="[301]"></a>frame_q_GetSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bus.o(i.frame_q_GetSize))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_packet_thread
</UL>

<P><STRONG><a name="[300]"></a>frame_q_Waite</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bus.o(i.frame_q_Waite))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_packet_thread
</UL>

<P><STRONG><a name="[228]"></a>free_seq_args</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, motor_thread.o(i.free_seq_args))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = free_seq_args &rArr; free &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Thread
</UL>

<P><STRONG><a name="[303]"></a>int_sqrt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, math_util.o(i.int_sqrt))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeOut_Reset
</UL>

<P><STRONG><a name="[281]"></a>io_cmd_run</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, io_thread.o(i.io_cmd_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = io_cmd_run &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_error_write
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itf_00030001_new
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itf_00030000_new
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itf_00020001_new
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itf_00020000_new
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_func_callback
</UL>

<P><STRONG><a name="[2bb]"></a>io_hd_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, io_thread.o(i.io_hd_init))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_thread_init
</UL>

<P><STRONG><a name="[171]"></a>io_thread_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, io_thread.o(i.io_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = io_thread_init &rArr; writable_io_init &rArr; writable_io_new &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writable_io_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_hd_init
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[2b7]"></a>itf_00020000_new</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, itf_00020000.o(i.itf_00020000_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = itf_00020000_new &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cmd_run
</UL>

<P><STRONG><a name="[2b9]"></a>itf_00020001_new</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, itf_00020001.o(i.itf_00020001_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = itf_00020001_new &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cmd_run
</UL>

<P><STRONG><a name="[2b8]"></a>itf_00030000_new</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, itf_00030000.o(i.itf_00030000_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = itf_00030000_new &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cmd_run
</UL>

<P><STRONG><a name="[2ba]"></a>itf_00030001_new</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, itf_00030001.o(i.itf_00030001_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = itf_00030001_new &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cmd_run
</UL>

<P><STRONG><a name="[2bd]"></a>itf_00040000_new</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, itf_00040000.o(i.itf_00040000_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = itf_00040000_new &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_cmd_run
</UL>

<P><STRONG><a name="[2be]"></a>itf_00040001_new</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, itf_00040001.o(i.itf_00040001_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = itf_00040001_new &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_cmd_run
</UL>

<P><STRONG><a name="[2bf]"></a>itf_00040010_new</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, itf_00040010.o(i.itf_00040010_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = itf_00040010_new &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_cmd_run
</UL>

<P><STRONG><a name="[2c0]"></a>itf_00040020_new</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, itf_00040020.o(i.itf_00040020_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = itf_00040020_new &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_cmd_run
</UL>

<P><STRONG><a name="[2c1]"></a>itf_00040030_new</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, itf_00040030.o(i.itf_00040030_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = itf_00040030_new &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_cmd_run
</UL>

<P><STRONG><a name="[225]"></a>led_error_write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, my_main.o(i.led_error_write))
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Thread
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rcc_clk_enable
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_bytes_send
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_bytes_send
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_signal_read_two
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_signal_read_average
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_signal_read_array
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_signal_read_ad_to_press_differ
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_signal_read_ad_to_press
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_signal_read_ad
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_signal_read
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_group_read_by
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_group_read_all
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_average_signal_read_old
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_average_signal_read
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_step_calc
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_distance_calc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cordinate_update
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_cmd_run
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rv_cmd_run
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cmd_run
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_run
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_channel_between
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_channel
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_auto_channel
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rev_frame_data_write
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rv_ctrl_thread
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write
</UL>

<P><STRONG><a name="[a9]"></a>m0_event_read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, motor_cmd_extend.o(i.m0_event_read))
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[b1]"></a>m1_event_read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, motor_cmd_extend.o(i.m1_event_read))
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[b9]"></a>m2_event_read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, motor_cmd_extend.o(i.m2_event_read))
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[c1]"></a>m3_event_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, motor_cfg.o(i.m3_event_read))
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[2c2]"></a>mGPIOReadPin</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, mtmc5130device.o(i.mGPIOReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mGPIOReadPin
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor3_state_machine
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor3_listen_io
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor2_state_machine
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor2_listen_io
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor1_state_machine
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor1_listen_io
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor0_state_machine
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor0_listen_io
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_io_read
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2_io_read
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m1_io_read
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m0_io_read
</UL>

<P><STRONG><a name="[2c6]"></a>mTMC5130DevicMoveRealPosition</STRONG> (Thumb, 174 bytes, Stack size 96 bytes, mtmc5130device.o(i.mTMC5130DevicMoveRealPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = mTMC5130DevicMoveRealPosition &rArr; mTMC5130DeviceGetState &rArr; mTMC5130DriverGetState &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DriverMove
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceGetState
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceGetPostion
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicMoveby
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicMoveto
</UL>

<P><STRONG><a name="[2cb]"></a>mTMC5130DevicMoveby</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, mtmc5130device.o(i.mTMC5130DevicMoveby))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = mTMC5130DevicMoveby &rArr; mTMC5130DevicMoveRealPosition &rArr; mTMC5130DeviceGetState &rArr; mTMC5130DriverGetState &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceGetPostion
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicMoveRealPosition
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor3_state_machine
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor2_state_machine
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor1_state_machine
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor0_state_machine
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_MultiMove
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_SimpleMove
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_MoveEvent
</UL>

<P><STRONG><a name="[2cc]"></a>mTMC5130DevicMoveto</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, mtmc5130device.o(i.mTMC5130DevicMoveto))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = mTMC5130DevicMoveto &rArr; mTMC5130DevicMoveRealPosition &rArr; mTMC5130DeviceGetState &rArr; mTMC5130DriverGetState &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicMoveRealPosition
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_MultiMove
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_SimpleMove
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_MoveEvent
</UL>

<P><STRONG><a name="[2cd]"></a>mTMC5130DevicRotate</STRONG> (Thumb, 160 bytes, Stack size 72 bytes, mtmc5130device.o(i.mTMC5130DevicRotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = mTMC5130DevicRotate &rArr; mTMC5130DriverMove &rArr; mTMC5130DriverSetSpeed &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DriverMove
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor3_state_machine
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor2_state_machine
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor1_state_machine
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor0_state_machine
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_Rotate
</UL>

<P><STRONG><a name="[2ce]"></a>mTMC5130DevicStop</STRONG> (Thumb, 76 bytes, Stack size 64 bytes, mtmc5130device.o(i.mTMC5130DevicStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = mTMC5130DevicStop &rArr; mTMC5130DriverMove &rArr; mTMC5130DriverSetSpeed &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DriverMove
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor3_state_machine
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor2_state_machine
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor1_state_machine
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor0_state_machine
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_Stop
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_Reset
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_Init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicWait_Sem
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_MoveEvent
</UL>

<P><STRONG><a name="[2cf]"></a>mTMC5130DevicWait_Sem</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, mtmc5130device.o(i.mTMC5130DevicWait_Sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = mTMC5130DevicWait_Sem &rArr; mTMC5130DevicStop &rArr; mTMC5130DriverMove &rArr; mTMC5130DriverSetSpeed &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceGetState
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicStop
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor3_state_machine
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor2_state_machine
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor1_state_machine
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor0_state_machine
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_Stop
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_Rotate
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_MultiMove
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_SimpleMove
</UL>

<P><STRONG><a name="[2d0]"></a>mTMC5130DeviceGetDRVSTATUS</STRONG> (Thumb, 26 bytes, Stack size 64 bytes, mtmc5130device.o(i.mTMC5130DeviceGetDRVSTATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = mTMC5130DeviceGetDRVSTATUS &rArr; mTMC5130DriverGetDRVSTATUS &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DriverGetDRVSTATUS
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_GetStatus
</UL>

<P><STRONG><a name="[213]"></a>mTMC5130DeviceGetPostion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mtmc5130device.o(i.mTMC5130DeviceGetPostion))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicMoveby
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor3_state_machine
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor2_state_machine
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor1_state_machine
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor0_state_machine
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_thread_exe_extend
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sample_check_run
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Reagent_Check_Run
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_GetStatus
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_ZeroTouch
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_run
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_SimpleMove
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicMoveRealPosition
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_MoveEvent
</UL>

<P><STRONG><a name="[2d2]"></a>mTMC5130DeviceGetPostionIf</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, mtmc5130device.o(i.mTMC5130DeviceGetPostionIf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DriverGetPositionIf
</UL>

<P><STRONG><a name="[2d4]"></a>mTMC5130DeviceGetRAMPSTAT</STRONG> (Thumb, 26 bytes, Stack size 64 bytes, mtmc5130device.o(i.mTMC5130DeviceGetRAMPSTAT))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = mTMC5130DeviceGetRAMPSTAT &rArr; mTMC5130DriverGetRAMPSTAT &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DriverGetRAMPSTAT
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_GetStatus
</UL>

<P><STRONG><a name="[2c7]"></a>mTMC5130DeviceGetState</STRONG> (Thumb, 26 bytes, Stack size 64 bytes, mtmc5130device.o(i.mTMC5130DeviceGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = mTMC5130DeviceGetState &rArr; mTMC5130DriverGetState &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DriverGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor3_state_machine
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor2_state_machine
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor1_state_machine
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor0_state_machine
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_GetStatus
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicWait_Sem
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicMoveRealPosition
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_MoveEvent
</UL>

<P><STRONG><a name="[2d7]"></a>mTMC5130DeviceResetPostion</STRONG> (Thumb, 26 bytes, Stack size 64 bytes, mtmc5130device.o(i.mTMC5130DeviceResetPostion))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = mTMC5130DeviceResetPostion &rArr; mTMC5130DriverResetPostion &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DriverResetPostion
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_Init
</UL>

<P><STRONG><a name="[2d9]"></a>mTMC5130DeviceSetPostion</STRONG> (Thumb, 26 bytes, Stack size 64 bytes, mtmc5130device.o(i.mTMC5130DeviceSetPostion))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = mTMC5130DeviceSetPostion &rArr; mTMC5130DriverSetPostion &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DriverSetPostion
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor3_state_machine
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor2_state_machine
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor1_state_machine
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor0_state_machine
</UL>

<P><STRONG><a name="[2db]"></a>mTMC5130Device_Init</STRONG> (Thumb, 26 bytes, Stack size 64 bytes, mtmc5130device.o(i.mTMC5130Device_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = mTMC5130Device_Init &rArr; mTMC5130Driver_Init &rArr; mTMC5130DriverSetDefaultRegister &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Driver_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_Init
</UL>

<P><STRONG><a name="[2dd]"></a>mTMC5130Device_SetDefault</STRONG> (Thumb, 84 bytes, Stack size 64 bytes, mtmc5130device.o(i.mTMC5130Device_SetDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = mTMC5130Device_SetDefault &rArr; mTMC5130DriverSetMicoStep &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DriverSetMicoStep
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DriverSetCurrent
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_Init
</UL>

<P><STRONG><a name="[2d1]"></a>mTMC5130DriverGetDRVSTATUS</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, mtmc5130driver.o(i.mTMC5130DriverGetDRVSTATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = mTMC5130DriverGetDRVSTATUS &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceGetDRVSTATUS
</UL>

<P><STRONG><a name="[2d3]"></a>mTMC5130DriverGetPositionIf</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, mtmc5130driver.o(i.mTMC5130DriverGetPositionIf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteReadIf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceGetPostionIf
</UL>

<P><STRONG><a name="[2d5]"></a>mTMC5130DriverGetRAMPSTAT</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, mtmc5130driver.o(i.mTMC5130DriverGetRAMPSTAT))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = mTMC5130DriverGetRAMPSTAT &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceGetRAMPSTAT
</UL>

<P><STRONG><a name="[2d6]"></a>mTMC5130DriverGetState</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mtmc5130driver.o(i.mTMC5130DriverGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = mTMC5130DriverGetState &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceGetState
</UL>

<P><STRONG><a name="[2ca]"></a>mTMC5130DriverMove</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, mtmc5130driver.o(i.mTMC5130DriverMove))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = mTMC5130DriverMove &rArr; mTMC5130DriverSetSpeed &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DriverSetSpeed
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DriverSetMicoStep
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DriverSetCurrent
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicRotate
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicStop
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicMoveRealPosition
</UL>

<P><STRONG><a name="[2d8]"></a>mTMC5130DriverResetPostion</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, mtmc5130driver.o(i.mTMC5130DriverResetPostion))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = mTMC5130DriverResetPostion &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceResetPostion
</UL>

<P><STRONG><a name="[2df]"></a>mTMC5130DriverSetCurrent</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mtmc5130driver.o(i.mTMC5130DriverSetCurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = mTMC5130DriverSetCurrent &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DriverMove
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Device_SetDefault
</UL>

<P><STRONG><a name="[2e1]"></a>mTMC5130DriverSetDefaultRegister</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, mtmc5130driver.o(i.mTMC5130DriverSetDefaultRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = mTMC5130DriverSetDefaultRegister &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Driver_Init
</UL>

<P><STRONG><a name="[2de]"></a>mTMC5130DriverSetMicoStep</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, mtmc5130driver.o(i.mTMC5130DriverSetMicoStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = mTMC5130DriverSetMicoStep &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DriverMove
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Device_SetDefault
</UL>

<P><STRONG><a name="[2da]"></a>mTMC5130DriverSetPostion</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, mtmc5130driver.o(i.mTMC5130DriverSetPostion))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = mTMC5130DriverSetPostion &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Nus
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteRead
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceSetPostion
</UL>

<P><STRONG><a name="[2e0]"></a>mTMC5130DriverSetSpeed</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, mtmc5130driver.o(i.mTMC5130DriverSetSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = mTMC5130DriverSetSpeed &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DriverMove
</UL>

<P><STRONG><a name="[2dc]"></a>mTMC5130Driver_Init</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, mtmc5130driver.o(i.mTMC5130Driver_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = mTMC5130Driver_Init &rArr; mTMC5130DriverSetDefaultRegister &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_create_sem
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DriverSetDefaultRegister
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Device_Init
</UL>

<P><STRONG><a name="[2e2]"></a>mTMC5130Motor_BackZero</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, mtmc5130device.o(i.mTMC5130Motor_BackZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = mTMC5130Motor_BackZero &rArr; mTMC5130Motor_Reset &rArr; mTMC5130Motor_SimpleMove &rArr; mTMC5130DevicMoveby &rArr; mTMC5130DevicMoveRealPosition &rArr; mTMC5130DeviceGetState &rArr; mTMC5130DriverGetState &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_Reset
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_SimpleMove
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_Move
</UL>

<P><STRONG><a name="[a1]"></a>mTMC5130Motor_GetStatus</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mtmc5130device.o(i.mTMC5130Motor_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = mTMC5130Motor_GetStatus &rArr; mTMC5130DeviceGetState &rArr; mTMC5130DriverGetState &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceGetState
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceGetPostion
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceGetRAMPSTAT
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceGetDRVSTATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[21c]"></a>mTMC5130Motor_Init</STRONG> (Thumb, 278 bytes, Stack size 56 bytes, mtmc5130device.o(i.mTMC5130Motor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = mTMC5130Motor_Init &rArr; mTMC5130Device_Init &rArr; mTMC5130Driver_Init &rArr; mTMC5130DriverSetDefaultRegister &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceGetPostion
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicStop
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Device_SetDefault
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Device_Init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceResetPostion
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorInit
</UL>

<P><STRONG><a name="[a3]"></a>mTMC5130Motor_Move</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mtmc5130device.o(i.mTMC5130Motor_Move))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = mTMC5130Motor_Move &rArr; mTMC5130Motor_BackZero &rArr; mTMC5130Motor_Reset &rArr; mTMC5130Motor_SimpleMove &rArr; mTMC5130DevicMoveby &rArr; mTMC5130DevicMoveRealPosition &rArr; mTMC5130DeviceGetState &rArr; mTMC5130DriverGetState &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_SimpleMove
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_BackZero
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[9d]"></a>mTMC5130Motor_MoveGPIOEvent</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mtmc5130device.o(i.mTMC5130Motor_MoveGPIOEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = mTMC5130Motor_MoveGPIOEvent &rArr; mTMC5130Motor_MoveEvent &rArr; mTMC5130DevicMoveby &rArr; mTMC5130DevicMoveRealPosition &rArr; mTMC5130DeviceGetState &rArr; mTMC5130DriverGetState &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_MoveEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[9c]"></a>mTMC5130Motor_MoveStopEvent</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mtmc5130device.o(i.mTMC5130Motor_MoveStopEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = mTMC5130Motor_MoveStopEvent &rArr; mTMC5130Motor_MoveEvent &rArr; mTMC5130DevicMoveby &rArr; mTMC5130DevicMoveRealPosition &rArr; mTMC5130DeviceGetState &rArr; mTMC5130DriverGetState &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_MoveEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[9f]"></a>mTMC5130Motor_MultiMove</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, mtmc5130device.o(i.mTMC5130Motor_MultiMove))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = mTMC5130Motor_MultiMove &rArr; mTMC5130DevicMoveby &rArr; mTMC5130DevicMoveRealPosition &rArr; mTMC5130DeviceGetState &rArr; mTMC5130DriverGetState &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicMoveby
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicWait_Sem
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicMoveto
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_SeqMove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[9b]"></a>mTMC5130Motor_Reset</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, mtmc5130device.o(i.mTMC5130Motor_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = mTMC5130Motor_Reset &rArr; mTMC5130Motor_SimpleMove &rArr; mTMC5130DevicMoveby &rArr; mTMC5130DevicMoveRealPosition &rArr; mTMC5130DeviceGetState &rArr; mTMC5130DriverGetState &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicStop
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_SimpleMove
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_BackZero
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[a2]"></a>mTMC5130Motor_Rotate</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mtmc5130device.o(i.mTMC5130Motor_Rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = mTMC5130Motor_Rotate &rArr; mTMC5130DevicWait_Sem &rArr; mTMC5130DevicStop &rArr; mTMC5130DriverMove &rArr; mTMC5130DriverSetSpeed &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicRotate
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicWait_Sem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[9e]"></a>mTMC5130Motor_SeqMove</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, mtmc5130device.o(i.mTMC5130Motor_SeqMove))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = mTMC5130Motor_SeqMove &rArr; mTMC5130Motor_MultiMove &rArr; mTMC5130DevicMoveby &rArr; mTMC5130DevicMoveRealPosition &rArr; mTMC5130DeviceGetState &rArr; mTMC5130DriverGetState &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_MultiMove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[2e3]"></a>mTMC5130Motor_SimpleMove</STRONG> (Thumb, 382 bytes, Stack size 40 bytes, mtmc5130device.o(i.mTMC5130Motor_SimpleMove))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = mTMC5130Motor_SimpleMove &rArr; mTMC5130DevicMoveby &rArr; mTMC5130DevicMoveRealPosition &rArr; mTMC5130DeviceGetState &rArr; mTMC5130DriverGetState &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicMoveby
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceGetPostion
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicWait_Sem
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicMoveto
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_Reset
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_Move
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_BackZero
</UL>

<P><STRONG><a name="[a0]"></a>mTMC5130Motor_Stop</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mtmc5130device.o(i.mTMC5130Motor_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = mTMC5130Motor_Stop &rArr; mTMC5130DevicWait_Sem &rArr; mTMC5130DevicStop &rArr; mTMC5130DriverMove &rArr; mTMC5130DriverSetSpeed &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicWait_Sem
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[2e5]"></a>mTMC5130Motor_ZeroTouch</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, mtmc5130device.o(i.mTMC5130Motor_ZeroTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = mTMC5130Motor_ZeroTouch &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceGetPostion
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_zero_touch
</UL>

<P><STRONG><a name="[2e6]"></a>mTMC5130ProcessSemPost</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, mtmc5130device.o(i.mTMC5130ProcessSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = mTMC5130ProcessSemPost &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_Targeted
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_WaitTaskId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_zero_touch
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_position_reach
</UL>

<P><STRONG><a name="[134]"></a>main</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = main &rArr; my_main &rArr; OSInit &rArr; OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART4_UART_Init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2eb]"></a>malloc_safe_insure</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, thread_safe.o(i.malloc_safe_insure))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = malloc_safe_insure &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
</UL>

<P><STRONG><a name="[283]"></a>motor_cmd_extend</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, motor_cmd_extend.o(i.motor_cmd_extend))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = motor_cmd_extend &rArr; queue_ele_enter &rArr; SeqQueue_Enter &rArr; ds_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_ele_enter
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_01000c23_new
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_01000c21_new
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_01000c20_new
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_func_callback_extern
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_run
</UL>

<P><STRONG><a name="[27f]"></a>motor_cmd_run</STRONG> (Thumb, 872 bytes, Stack size 40 bytes, motor_thread.o(i.motor_cmd_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = motor_cmd_run &rArr; motor_cmd_extend &rArr; queue_ele_enter &rArr; SeqQueue_Enter &rArr; ds_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_error_write
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_ele_enter
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_distance_calc
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_extend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cordinate_update
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceGetPostion
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_01000b04_new
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_00010083_new
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_00010082_new
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_00010080_new
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_00010071_new
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_00010070_new
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_00010062_new
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_00010060_new
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_00010050_new
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_00010040_new
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_00010031_new
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_00010030_new
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_00010020_new
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_00010010_new
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_00010000_new
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_func_callback
</UL>

<P><STRONG><a name="[21d]"></a>motor_cordinate_update</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, motor_thread.o(i.motor_cordinate_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = motor_cordinate_update &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_error_write
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorInit
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_run
</UL>

<P><STRONG><a name="[214]"></a>motor_distance_calc</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, motor_thread.o(i.motor_distance_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = motor_distance_calc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_error_write
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Thread
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_thread_exe_extend
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sample_check_run
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Reagent_Check_Run
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_run
</UL>

<P><STRONG><a name="[226]"></a>motor_move_done_notify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, motor_cfg.o(i.motor_move_done_notify))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Thread
</UL>

<P><STRONG><a name="[1ca]"></a>motor_position_reach</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, motor_thread.o(i.motor_position_reach))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = motor_position_reach &rArr; mTMC5130ProcessSemPost &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130ProcessSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[210]"></a>motor_step_calc</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, motor_thread.o(i.motor_step_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = motor_step_calc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_error_write
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Thread
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sample_suck_start
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Meagent_Suck_Start
</UL>

<P><STRONG><a name="[224]"></a>motor_thread_exe_extend</STRONG> (Thumb, 932 bytes, Stack size 56 bytes, motor_cmd_extend.o(i.motor_thread_exe_extend))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = motor_thread_exe_extend &rArr; module_sample_suck_start &rArr; motor_step_calc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_distance_calc
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sample_suck_start
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Press_Adjust
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Reagent_Data_Recieve
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Meagent_Suck_Start
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceGetPostion
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Thread
</UL>

<P><STRONG><a name="[1c9]"></a>motor_zero_touch</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, motor_thread.o(i.motor_zero_touch))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = motor_zero_touch &rArr; mTMC5130Motor_ZeroTouch &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130ProcessSemPost
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_ZeroTouch
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[294]"></a>my_free</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bus.o(i.my_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = my_free &rArr; free &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_packet_del
</UL>

<P><STRONG><a name="[2ea]"></a>my_main</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, my_main.o(i.my_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = my_main &rArr; OSInit &rArr; OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_error_write
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_GetAddress
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_safe_insure
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[292]"></a>my_malloc</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, bus.o(i.my_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = my_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_packet_alloc
</UL>

<P><STRONG><a name="[29d]"></a>pack_map_del</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, bus.o(i.pack_map_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = pack_map_del
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_map_key_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_insert
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_del
</UL>

<P><STRONG><a name="[2a9]"></a>pack_map_insert</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, bus.o(i.pack_map_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = pack_map_insert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_set
</UL>

<P><STRONG><a name="[29c]"></a>pack_map_serach</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, bus.o(i.pack_map_serach))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = pack_map_serach
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_map_key_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_insert
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_del
</UL>

<P><STRONG><a name="[ee]"></a>packet_callback_thread</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, bus.o(i.packet_callback_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = packet_callback_thread &rArr; packet_q_pend &rArr; bus_os_pend_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_q_GetSize
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_q_Delete
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_packet_del
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_q_pend
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bus.o(i.bus_app_init)
</UL>
<P><STRONG><a name="[2f6]"></a>packet_q_Delete</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, bus.o(i.packet_q_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = packet_q_Delete
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_callback_thread
</UL>

<P><STRONG><a name="[2a6]"></a>packet_q_Enter</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, bus.o(i.packet_q_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = packet_q_Enter &rArr; packet_q_post &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_q_post
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_insert
</UL>

<P><STRONG><a name="[2f5]"></a>packet_q_GetSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bus.o(i.packet_q_GetSize))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_callback_thread
</UL>

<P><STRONG><a name="[2f0]"></a>queue_ele_enter</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, motor_thread.o(i.queue_ele_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = queue_ele_enter &rArr; SeqQueue_Enter &rArr; ds_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeqQueue_Enter
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_extend
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_run
</UL>

<P><STRONG><a name="[2fb]"></a>runze_new</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, runze_sv04_new.o(i.runze_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = runze_new &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_create_sem
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rv_thread_init
</UL>

<P><STRONG><a name="[280]"></a>rv_cmd_run</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, rv_thread.o(i.rv_cmd_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = rv_cmd_run &rArr; queue_ele_enter &rArr; SeqQueue_Enter &rArr; ds_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_error_write
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_000100a2_new
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_000100a1_new
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itf_000100a0_new
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_ele_enter
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_func_callback
</UL>

<P><STRONG><a name="[2fc]"></a>rv_hd_init</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, rv_cfg.o(i.rv_hd_init))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rv_thread_init
</UL>

<P><STRONG><a name="[172]"></a>rv_thread_init</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, rv_thread.o(i.rv_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = rv_thread_init &rArr; bus_create_thread &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_create_sem
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_create_thread
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeqQueue_Init
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rv_hd_init
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runze_new
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[28d]"></a>rx_p_map_del</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bus.o(i.rx_p_map_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = rx_p_map_del
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_p_map_key_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return_send_err
</UL>

<P><STRONG><a name="[2a0]"></a>rx_p_map_del_outdated</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, bus.o(i.rx_p_map_del_outdated))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = rx_p_map_del_outdated &rArr; bus_os_time_get &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_insert
</UL>

<P><STRONG><a name="[2a1]"></a>rx_p_map_error</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, bus.o(i.rx_p_map_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = rx_p_map_error
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_p_map_key_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_insert
</UL>

<P><STRONG><a name="[2a7]"></a>rx_p_map_insert</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, bus.o(i.rx_p_map_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = rx_p_map_insert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_time_get
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_insert
</UL>

<P><STRONG><a name="[2a8]"></a>rx_p_map_older</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bus.o(i.rx_p_map_older))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = rx_p_map_older
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_insert
</UL>

<P><STRONG><a name="[2a5]"></a>rx_p_map_serach</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, bus.o(i.rx_p_map_serach))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = rx_p_map_serach
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_p_map_key_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_insert
</UL>

<P><STRONG><a name="[ed]"></a>rx_packet_thread</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bus.o(i.rx_packet_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = rx_packet_thread &rArr; rx_frame_handle &rArr; expect_packet_insert &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_q_Waite
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_q_GetSize
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_q_Delete
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_frame_handle
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bus.o(i.bus_app_init)
</UL>
<P><STRONG><a name="[282]"></a>signal_cmd_run</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, ad_signal.o(i.signal_cmd_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = signal_cmd_run &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_error_write
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itf_00040030_new
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itf_00040020_new
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itf_00040010_new
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itf_00040001_new
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itf_00040000_new
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_func_callback
</UL>

<P><STRONG><a name="[2ee]"></a>timeOut_Reset</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, mtmc5130device.o(i.timeOut_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = timeOut_Reset &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_sqrt
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor3_state_machine
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor2_state_machine
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor1_state_machine
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor0_state_machine
</UL>

<P><STRONG><a name="[28b]"></a>tx_p_map_del</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, bus.o(i.tx_p_map_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tx_p_map_del
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_p_map_key_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_hb_send
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_frame_handle
</UL>

<P><STRONG><a name="[286]"></a>tx_p_map_insert</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, bus.o(i.tx_p_map_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = tx_p_map_insert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_hb_send
</UL>

<P><STRONG><a name="[2a3]"></a>tx_p_map_modify</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, bus.o(i.tx_p_map_modify))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = tx_p_map_modify &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_p_map_key_compare
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_insert
</UL>

<P><STRONG><a name="[28c]"></a>tx_p_map_serach</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, bus.o(i.tx_p_map_serach))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tx_p_map_serach
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_p_map_key_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_hb_send
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_insert
</UL>

<P><STRONG><a name="[229]"></a>wait_motor_seq_move_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, motor_thread.o(i.wait_motor_seq_move_start))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Thread
</UL>

<P><STRONG><a name="[2bc]"></a>writable_io_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, io_thread_cfg.o(i.writable_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = writable_io_init &rArr; writable_io_new &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writable_io_new
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_thread_init
</UL>

<P><STRONG><a name="[305]"></a>writable_io_new</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, io_mod.o(i.writable_io_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = writable_io_new &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writable_io_init
</UL>

<P><STRONG><a name="[12c]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[219]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_distance_calc
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_thread_exe_extend
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Reagent_Check_Run
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeOut_Reset
</UL>

<P><STRONG><a name="[307]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2f2]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_thread_exe_extend
</UL>

<P><STRONG><a name="[30a]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[2ec]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_distance_calc
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_thread_exe_extend
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sample_check_run
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeOut_Reset
</UL>

<P><STRONG><a name="[30d]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2c9]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicMoveRealPosition
</UL>

<P><STRONG><a name="[30e]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2b6]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_signal_read_ad_to_press_differ
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_signal_read_ad_to_press
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_thread_exe_extend
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sample_check_run
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_Reset
</UL>

<P><STRONG><a name="[30f]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2c8]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_distance_calc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicMoveRealPosition
</UL>

<P><STRONG><a name="[360]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[217]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_signal_read_ad_to_press_differ
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_signal_read_ad_to_press
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_distance_calc
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_thread_exe_extend
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sample_check_run
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Reagent_Check_Run
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeOut_Reset
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_Reset
</UL>

<P><STRONG><a name="[361]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[218]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_signal_read_ad_to_press_differ
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_signal_read_ad_to_press
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_thread_exe_extend
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sample_check_run
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Reagent_Check_Run
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_Reset
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicMoveRealPosition
</UL>

<P><STRONG><a name="[310]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[309]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[30c]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[2b5]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_signal_read_ad_to_press_differ
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_signal_read_ad_to_press
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_thread_exe_extend
</UL>

<P><STRONG><a name="[311]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[216]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Thread
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_distance_calc
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_thread_exe_extend
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sample_check_run
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Reagent_Check_Run
</UL>

<P><STRONG><a name="[313]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[1fe]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_thread_exe_extend
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_critical_adjust
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sample_check_run
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Press_Adjust
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Reagent_Check_Run
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeOut_Reset
</UL>

<P><STRONG><a name="[315]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[317]"></a>__fpl_fcheck_NaN1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[31d]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[1ff]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_critical_adjust
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Press_Adjust
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Reagent_Check_Run
</UL>

<P><STRONG><a name="[319]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[2f1]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_step_calc
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeOut_Reset
</UL>

<P><STRONG><a name="[31a]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[203]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_thread_exe_extend
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sample_check_run
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Reagent_Check_Run
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeOut_Reset
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cordinate_update
</UL>

<P><STRONG><a name="[31b]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[200]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_step_calc
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_thread_exe_extend
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_critical_adjust
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Press_Adjust
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Reagent_Data_Recieve
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeOut_Reset
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cordinate_update
</UL>

<P><STRONG><a name="[362]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[261]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Press_Adjust
</UL>

<P><STRONG><a name="[31c]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[320]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[202]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_step_calc
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_thread_exe_extend
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_critical_adjust
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Press_Adjust
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Reagent_Data_Recieve
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeOut_Reset
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cordinate_update
</UL>

<P><STRONG><a name="[31e]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[314]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[308]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[263]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Press_Adjust
</UL>

<P><STRONG><a name="[31f]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[215]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_critical_adjust
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Press_Adjust
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Reagent_Check_Run
</UL>

<P><STRONG><a name="[321]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[201]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_thread_exe_extend
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_critical_adjust
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sample_check_run
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Press_Adjust
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Reagent_Check_Run
</UL>

<P><STRONG><a name="[323]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[120]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[318]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>

<P><STRONG><a name="[302]"></a>__ARM_scalbnf</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, scalbnf.o(x$fpl$scalbnf))
<BR><BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeOut_Reset
</UL>

<P><STRONG><a name="[324]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[204]"></a>MX_ADC1_Init</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, main.o(i.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e9]"></a>MX_DMA_Init</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, main.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MX_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[206]"></a>MX_GPIO_Init</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[207]"></a>MX_SPI1_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[208]"></a>MX_TIM2_Init</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, main.o(i.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20a]"></a>MX_TIM3_Init</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, main.o(i.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20b]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20c]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20d]"></a>MX_USART4_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.MX_USART4_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_USART4_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b3]"></a>hal_rcc_clk_enable</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, motor_cfg.o(i.hal_rcc_clk_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = hal_rcc_clk_enable &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_error_write
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_io_write
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_io_read
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2_io_write
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2_io_read
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m1_io_write
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m1_io_read
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m0_io_write
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m0_io_read
</UL>

<P><STRONG><a name="[aa]"></a>m0_io_read</STRONG> (Thumb, 402 bytes, Stack size 40 bytes, motor_cfg.o(i.m0_io_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = m0_io_read &rArr; hal_rcc_clk_enable &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mGPIOReadPin
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ISR_ID
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rcc_clk_enable
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[ab]"></a>m0_io_write</STRONG> (Thumb, 282 bytes, Stack size 48 bytes, motor_cfg.o(i.m0_io_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = m0_io_write &rArr; hal_rcc_clk_enable &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rcc_clk_enable
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[b2]"></a>m1_io_read</STRONG> (Thumb, 434 bytes, Stack size 40 bytes, motor_cfg.o(i.m1_io_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = m1_io_read &rArr; hal_rcc_clk_enable &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mGPIOReadPin
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ISR_ID
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rcc_clk_enable
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[b3]"></a>m1_io_write</STRONG> (Thumb, 318 bytes, Stack size 48 bytes, motor_cfg.o(i.m1_io_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = m1_io_write &rArr; hal_rcc_clk_enable &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rcc_clk_enable
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[ba]"></a>m2_io_read</STRONG> (Thumb, 434 bytes, Stack size 40 bytes, motor_cfg.o(i.m2_io_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = m2_io_read &rArr; hal_rcc_clk_enable &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mGPIOReadPin
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ISR_ID
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rcc_clk_enable
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[bb]"></a>m2_io_write</STRONG> (Thumb, 336 bytes, Stack size 48 bytes, motor_cfg.o(i.m2_io_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = m2_io_write &rArr; hal_rcc_clk_enable &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rcc_clk_enable
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[c2]"></a>m3_io_read</STRONG> (Thumb, 434 bytes, Stack size 40 bytes, motor_cfg.o(i.m3_io_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = m3_io_read &rArr; hal_rcc_clk_enable &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mGPIOReadPin
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ISR_ID
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rcc_clk_enable
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[c3]"></a>m3_io_write</STRONG> (Thumb, 336 bytes, Stack size 48 bytes, motor_cfg.o(i.m3_io_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = m3_io_write &rArr; hal_rcc_clk_enable &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rcc_clk_enable
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[a7]"></a>motor0_backzeor</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, motor_cfg.o(i.motor0_backzeor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = motor0_backzeor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[a4]"></a>motor0_listen_event</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, motor_cfg.o(i.motor0_listen_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = motor0_listen_event &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[a5]"></a>motor0_listen_io</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, motor_cfg.o(i.motor0_listen_io))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = motor0_listen_io &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mGPIOReadPin
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[a6]"></a>motor0_reset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, motor_cfg.o(i.motor0_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = motor0_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[a8]"></a>motor0_state_machine</STRONG> (Thumb, 588 bytes, Stack size 24 bytes, motor_cfg.o(i.motor0_state_machine))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = motor0_state_machine &rArr; mTMC5130DevicMoveby &rArr; mTMC5130DevicMoveRealPosition &rArr; mTMC5130DeviceGetState &rArr; mTMC5130DriverGetState &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicRotate
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicMoveby
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mGPIOReadPin
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_zero_no_trig
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeOut_Reset
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceSetPostion
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceGetState
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceGetPostion
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicWait_Sem
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicStop
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[af]"></a>motor1_backzeor</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, motor_cfg.o(i.motor1_backzeor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = motor1_backzeor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[ac]"></a>motor1_listen_event</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, motor_cfg.o(i.motor1_listen_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = motor1_listen_event &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[ad]"></a>motor1_listen_io</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, motor_cfg.o(i.motor1_listen_io))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = motor1_listen_io &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mGPIOReadPin
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[ae]"></a>motor1_reset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, motor_cfg.o(i.motor1_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = motor1_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[b0]"></a>motor1_state_machine</STRONG> (Thumb, 588 bytes, Stack size 24 bytes, motor_cfg.o(i.motor1_state_machine))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = motor1_state_machine &rArr; mTMC5130DevicMoveby &rArr; mTMC5130DevicMoveRealPosition &rArr; mTMC5130DeviceGetState &rArr; mTMC5130DriverGetState &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicRotate
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicMoveby
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mGPIOReadPin
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_zero_no_trig
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeOut_Reset
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceSetPostion
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceGetState
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceGetPostion
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicWait_Sem
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicStop
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[b7]"></a>motor2_backzeor</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, motor_cfg.o(i.motor2_backzeor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = motor2_backzeor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[b4]"></a>motor2_listen_event</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, motor_cfg.o(i.motor2_listen_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = motor2_listen_event &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[b5]"></a>motor2_listen_io</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, motor_cfg.o(i.motor2_listen_io))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = motor2_listen_io &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mGPIOReadPin
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[b6]"></a>motor2_reset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, motor_cfg.o(i.motor2_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = motor2_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[b8]"></a>motor2_state_machine</STRONG> (Thumb, 588 bytes, Stack size 24 bytes, motor_cfg.o(i.motor2_state_machine))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = motor2_state_machine &rArr; mTMC5130DevicMoveby &rArr; mTMC5130DevicMoveRealPosition &rArr; mTMC5130DeviceGetState &rArr; mTMC5130DriverGetState &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicRotate
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicMoveby
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mGPIOReadPin
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_zero_no_trig
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeOut_Reset
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceSetPostion
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceGetState
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceGetPostion
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicWait_Sem
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicStop
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[bf]"></a>motor3_backzeor</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, motor_cfg.o(i.motor3_backzeor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = motor3_backzeor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[bc]"></a>motor3_listen_event</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, motor_cfg.o(i.motor3_listen_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = motor3_listen_event &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[bd]"></a>motor3_listen_io</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, motor_cfg.o(i.motor3_listen_io))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = motor3_listen_io &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mGPIOReadPin
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[be]"></a>motor3_reset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, motor_cfg.o(i.motor3_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = motor3_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[c0]"></a>motor3_state_machine</STRONG> (Thumb, 588 bytes, Stack size 24 bytes, motor_cfg.o(i.motor3_state_machine))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = motor3_state_machine &rArr; mTMC5130DevicMoveby &rArr; mTMC5130DevicMoveRealPosition &rArr; mTMC5130DeviceGetState &rArr; mTMC5130DriverGetState &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicRotate
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicMoveby
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mGPIOReadPin
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_zero_no_trig
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeOut_Reset
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceSetPostion
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceGetState
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceGetPostion
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicWait_Sem
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicStop
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[c6]"></a>queue0_pend</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, motor_cfg.o(i.queue0_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = queue0_pend &rArr; bus_os_pend_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_pend_sem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[c5]"></a>queue0_post</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, motor_cfg.o(i.queue0_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = queue0_post &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_post_sem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[c8]"></a>queue1_pend</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, motor_cfg.o(i.queue1_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = queue1_pend &rArr; bus_os_pend_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_pend_sem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[c7]"></a>queue1_post</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, motor_cfg.o(i.queue1_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = queue1_post &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_post_sem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[ca]"></a>queue2_pend</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, motor_cfg.o(i.queue2_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = queue2_pend &rArr; bus_os_pend_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_pend_sem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[c9]"></a>queue2_post</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, motor_cfg.o(i.queue2_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = queue2_post &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_post_sem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[cc]"></a>queue3_pend</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, motor_cfg.o(i.queue3_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = queue3_pend &rArr; bus_os_pend_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_pend_sem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[cb]"></a>queue3_post</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, motor_cfg.o(i.queue3_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = queue3_post &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_post_sem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(i.MotorInit)
</UL>
<P><STRONG><a name="[2ef]"></a>wait_zero_no_trig</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, motor_cfg.o(i.wait_zero_no_trig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = wait_zero_no_trig &rArr; bus_os_sleep &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor3_state_machine
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor2_state_machine
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor1_state_machine
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor0_state_machine
</UL>

<P><STRONG><a name="[20e]"></a>Module_Meagent_Suck_Start</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, motor_cmd_extend.o(i.Module_Meagent_Suck_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = Module_Meagent_Suck_Start &rArr; motor_step_calc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_step_calc
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_thread_exe_extend
</UL>

<P><STRONG><a name="[211]"></a>Module_Reagent_Check_Run</STRONG> (Thumb, 482 bytes, Stack size 32 bytes, motor_cmd_extend.o(i.Module_Reagent_Check_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Module_Reagent_Check_Run &rArr; motor_distance_calc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_distance_calc
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Press_Adjust
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceGetPostion
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[21a]"></a>Module_Reagent_Data_Recieve</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, motor_cmd_extend.o(i.Module_Reagent_Data_Recieve))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Module_Reagent_Data_Recieve &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_thread_exe_extend
</UL>

<P><STRONG><a name="[212]"></a>Press_Adjust</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, motor_cmd_extend.o(i.Press_Adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Press_Adjust &rArr; press_critical_adjust &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_critical_adjust
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_thread_exe_extend
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sample_check_run
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Reagent_Check_Run
</UL>

<P><STRONG><a name="[26c]"></a>module_sample_check_run</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, motor_cmd_extend.o(i.module_sample_check_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = module_sample_check_run &rArr; motor_distance_calc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_distance_calc
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Press_Adjust
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceGetPostion
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[2ed]"></a>module_sample_suck_start</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, motor_cmd_extend.o(i.module_sample_suck_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = module_sample_suck_start &rArr; motor_step_calc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_step_calc
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_thread_exe_extend
</UL>

<P><STRONG><a name="[262]"></a>press_critical_adjust</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, motor_cmd_extend.o(i.press_critical_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = press_critical_adjust &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Press_Adjust
</UL>

<P><STRONG><a name="[264]"></a>QuickSort</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ad_signal_cfg.o(i.QuickSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = QuickSort &rArr;  QuickSort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuickSort
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_signal_read_average
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_average_signal_read_old
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_average_signal_read
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuickSort
</UL>

<P><STRONG><a name="[2b4]"></a>average_press</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, ad_signal_cfg.o(i.average_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = average_press
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_signal_read_average
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_average_signal_read_old
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_average_signal_read
</UL>

<P><STRONG><a name="[ea]"></a>hd_average_signal_read</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ad_signal_cfg.o(i.hd_average_signal_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = hd_average_signal_read &rArr; hd_signal_read &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_error_write
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_signal_read
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;average_press
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuickSort
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ad_signal_cfg.o(i.ad_signal_hd_init)
</UL>
<P><STRONG><a name="[eb]"></a>hd_average_signal_read_old</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ad_signal_cfg.o(i.hd_average_signal_read_old))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = hd_average_signal_read_old &rArr; hd_signal_read_ad_to_press_differ &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_error_write
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_signal_read_ad_to_press_differ
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;average_press
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuickSort
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ad_signal_cfg.o(i.ad_signal_hd_init)
</UL>
<P><STRONG><a name="[e9]"></a>hd_group_read_all</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ad_signal_cfg.o(i.hd_group_read_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = hd_group_read_all &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_error_write
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ad_signal_cfg.o(i.ad_signal_hd_init)
</UL>
<P><STRONG><a name="[e8]"></a>hd_group_read_by</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ad_signal_cfg.o(i.hd_group_read_by))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = hd_group_read_by &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_error_write
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ad_signal_cfg.o(i.ad_signal_hd_init)
</UL>
<P><STRONG><a name="[e2]"></a>hd_signal_read</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ad_signal_cfg.o(i.hd_signal_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = hd_signal_read &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_error_write
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_average_signal_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ad_signal_cfg.o(i.ad_signal_hd_init)
</UL>
<P><STRONG><a name="[e3]"></a>hd_signal_read_ad</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ad_signal_cfg.o(i.hd_signal_read_ad))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = hd_signal_read_ad &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_error_write
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_signal_read_average
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ad_signal_cfg.o(i.ad_signal_hd_init)
</UL>
<P><STRONG><a name="[e4]"></a>hd_signal_read_ad_to_press</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ad_signal_cfg.o(i.hd_signal_read_ad_to_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = hd_signal_read_ad_to_press &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_error_write
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ad_signal_cfg.o(i.ad_signal_hd_init)
</UL>
<P><STRONG><a name="[e6]"></a>hd_signal_read_ad_to_press_differ</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ad_signal_cfg.o(i.hd_signal_read_ad_to_press_differ))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = hd_signal_read_ad_to_press_differ &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_error_write
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_average_signal_read_old
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ad_signal_cfg.o(i.ad_signal_hd_init)
</UL>
<P><STRONG><a name="[e7]"></a>hd_signal_read_array</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ad_signal_cfg.o(i.hd_signal_read_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = hd_signal_read_array &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_error_write
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ad_signal_cfg.o(i.ad_signal_hd_init)
</UL>
<P><STRONG><a name="[ec]"></a>hd_signal_read_average</STRONG> (Thumb, 78 bytes, Stack size 64 bytes, ad_signal_cfg.o(i.hd_signal_read_average))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = hd_signal_read_average &rArr; hd_signal_read_ad &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_error_write
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_signal_read_ad
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;average_press
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuickSort
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ad_signal_cfg.o(i.ad_signal_hd_init)
</UL>
<P><STRONG><a name="[e5]"></a>hd_signal_read_two</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ad_signal_cfg.o(i.hd_signal_read_two))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = hd_signal_read_two &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_error_write
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ad_signal_cfg.o(i.ad_signal_hd_init)
</UL>
<P><STRONG><a name="[116]"></a>io_hd_write</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, io_thread_cfg.o(i.io_hd_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = io_hd_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> io_thread_cfg.o(i.writable_io_init)
</UL>
<P><STRONG><a name="[110]"></a>queue0_pend</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rv_cfg.o(i.queue0_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = queue0_pend &rArr; bus_os_pend_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_pend_sem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rv_cfg.o(i.rv_hd_init)
</UL>
<P><STRONG><a name="[10f]"></a>queue0_post</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rv_cfg.o(i.queue0_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = queue0_post &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_post_sem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rv_cfg.o(i.rv_hd_init)
</UL>
<P><STRONG><a name="[113]"></a>queue1_pend</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rv_cfg.o(i.queue1_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = queue1_pend &rArr; bus_os_pend_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_pend_sem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rv_cfg.o(i.rv_hd_init)
</UL>
<P><STRONG><a name="[112]"></a>queue1_post</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rv_cfg.o(i.queue1_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = queue1_post &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_post_sem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rv_cfg.o(i.rv_hd_init)
</UL>
<P><STRONG><a name="[111]"></a>uart0_bytes_send</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rv_cfg.o(i.uart0_bytes_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = uart0_bytes_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_error_write
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rv_cfg.o(i.rv_hd_init)
</UL>
<P><STRONG><a name="[114]"></a>uart1_bytes_send</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rv_cfg.o(i.uart1_bytes_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = uart1_bytes_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_error_write
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rv_cfg.o(i.rv_hd_init)
</UL>
<P><STRONG><a name="[265]"></a>SPI_WriteRead</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mtmc5130driver.o(i.SPI_WriteRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteReadIf
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Driver_Init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DriverSetSpeed
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DriverSetPostion
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DriverSetMicoStep
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DriverSetDefaultRegister
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DriverSetCurrent
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DriverResetPostion
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DriverMove
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DriverGetState
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DriverGetRAMPSTAT
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DriverGetDRVSTATUS
</UL>

<P><STRONG><a name="[266]"></a>SPI_WriteReadIf</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, mtmc5130driver.o(i.SPI_WriteReadIf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DriverGetPositionIf
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteRead
</UL>

<P><STRONG><a name="[1c5]"></a>FLASH_Program_Byte</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[1c4]"></a>FLASH_Program_DoubleWord</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_DoubleWord))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[1c6]"></a>FLASH_Program_HalfWord</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_HalfWord))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[1c7]"></a>FLASH_Program_Word</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_Word))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[1a1]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[1de]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[1e0]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[1df]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[1e1]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[1bf]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[1be]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[1c0]"></a>DMA_SetConfig</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, stm32f4xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[1c2]"></a>FLASH_MassErase</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[1e4]"></a>UART_SetConfig</STRONG> (Thumb, 822 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1e6]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[6e]"></a>ADC_DMAConvCplt</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(i.ADC_DMAConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[70]"></a>ADC_DMAError</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(i.ADC_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[6f]"></a>ADC_DMAHalfConvCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(i.ADC_DMAHalfConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAHalfConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[1b9]"></a>ADC_Init</STRONG> (Thumb, 308 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.ADC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[105]"></a>AppTaskStart</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, my_main.o(i.AppTaskStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = AppTaskStart &rArr; MotorInit &rArr; mTMC5130Motor_Init &rArr; mTMC5130Device_Init &rArr; mTMC5130Driver_Init &rArr; mTMC5130DriverSetDefaultRegister &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorInit
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rv_thread_init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_thread_init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_app_init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_adapter_add
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_signal_init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_main.o(i.my_main)
</UL>
<P><STRONG><a name="[69]"></a>io_thread_create</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, my_main.o(i.io_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = io_thread_create &rArr; bus_create_thread &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_create_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_main.o(i.AppTaskStart)
</UL>
<P><STRONG><a name="[81]"></a>packet_parse</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, itf_00010062.o(i.packet_parse))
<BR>[Address Reference Count : 1]<UL><LI> itf_00010062.o(i.Itf_00010062_new)
</UL>
<P><STRONG><a name="[82]"></a>ret_and_free</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, itf_00010062.o(i.ret_and_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ret_and_free &rArr; bus_ita_return &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00010062.o(i.Itf_00010062_new)
</UL>
<P><STRONG><a name="[2f9]"></a>queue_ele_enter</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, rv_thread.o(i.queue_ele_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = queue_ele_enter &rArr; SeqQueue_Enter &rArr; ds_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeqQueue_Enter
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rv_cmd_run
</UL>

<P><STRONG><a name="[115]"></a>rv_ctrl_thread</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, rv_thread.o(i.rv_ctrl_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = rv_ctrl_thread &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_error_write
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeqQueue_GetSize
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeqQueue_Waite
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeqQueue_Delete
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rv_thread.o(i.rv_thread_init)
</UL>
<P><STRONG><a name="[10e]"></a>byte_rev</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, runze_sv04_new.o(i.byte_rev))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = byte_rev &rArr; is_rev_frame_check_ok &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_post_sem
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rev_frame_data_write
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rev_frame_clear
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_rev_frame_check_ok
</UL>
<BR>[Address Reference Count : 1]<UL><LI> runze_sv04_new.o(i.runze_new)
</UL>
<P><STRONG><a name="[2ab]"></a>calc_checksum</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, runze_sv04_new.o(i.calc_checksum))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_rev_frame_check_ok
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_make_send
</UL>

<P><STRONG><a name="[107]"></a>current_position_query</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, runze_sv04_new.o(i.current_position_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = current_position_query &rArr; quary_cmd_send &rArr; frame_make_send_wait &rArr; frame_make_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quary_cmd_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> runze_sv04_new.o(i.runze_new)
</UL>
<P><STRONG><a name="[106]"></a>current_version_query</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, runze_sv04_new.o(i.current_version_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = current_version_query &rArr; quary_cmd_send &rArr; frame_make_send_wait &rArr; frame_make_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quary_cmd_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> runze_sv04_new.o(i.runze_new)
</UL>
<P><STRONG><a name="[2aa]"></a>frame_make_send</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, runze_sv04_new.o(i.frame_make_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = frame_make_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_checksum
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_make_send_wait
</UL>

<P><STRONG><a name="[2ac]"></a>frame_make_send_wait</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, runze_sv04_new.o(i.frame_make_send_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = frame_make_send_wait &rArr; frame_make_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_pend_sem
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rev_frame_state_read
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rev_frame_data_read
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_make_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_cmd_send
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quary_cmd_send
</UL>

<P><STRONG><a name="[296]"></a>is_rev_frame_check_ok</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, runze_sv04_new.o(i.is_rev_frame_check_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = is_rev_frame_check_ok &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadU16
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_checksum
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byte_rev
</UL>

<P><STRONG><a name="[108]"></a>motor_state_query</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, runze_sv04_new.o(i.motor_state_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = motor_state_query &rArr; quary_cmd_send &rArr; frame_make_send_wait &rArr; frame_make_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quary_cmd_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> runze_sv04_new.o(i.runze_new)
</UL>
<P><STRONG><a name="[299]"></a>quary_cmd_send</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, runze_sv04_new.o(i.quary_cmd_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = quary_cmd_send &rArr; frame_make_send_wait &rArr; frame_make_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_make_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_state_query
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_version_query
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_position_query
</UL>

<P><STRONG><a name="[297]"></a>rev_frame_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, runze_sv04_new.o(i.rev_frame_clear))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byte_rev
</UL>

<P><STRONG><a name="[2ae]"></a>rev_frame_data_read</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, runze_sv04_new.o(i.rev_frame_data_read))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_make_send_wait
</UL>

<P><STRONG><a name="[295]"></a>rev_frame_data_write</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, runze_sv04_new.o(i.rev_frame_data_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = rev_frame_data_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_error_write
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byte_rev
</UL>

<P><STRONG><a name="[2ad]"></a>rev_frame_state_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, runze_sv04_new.o(i.rev_frame_state_read))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_make_send_wait
</UL>

<P><STRONG><a name="[10b]"></a>run_auto_channel</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, runze_sv04_new.o(i.run_auto_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = run_auto_channel &rArr; run_cmd_send &rArr; frame_make_send_wait &rArr; frame_make_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_error_write
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_cmd_send
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> runze_sv04_new.o(i.runze_new)
</UL>
<P><STRONG><a name="[10c]"></a>run_auto_channel_between</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, runze_sv04_new.o(i.run_auto_channel_between))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = run_auto_channel_between &rArr; run_channel_between &rArr; run_cmd_send &rArr; frame_make_send_wait &rArr; frame_make_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_channel_between
</UL>
<BR>[Address Reference Count : 1]<UL><LI> runze_sv04_new.o(i.runze_new)
</UL>
<P><STRONG><a name="[109]"></a>run_channel</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, runze_sv04_new.o(i.run_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = run_channel &rArr; run_cmd_send &rArr; frame_make_send_wait &rArr; frame_make_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_error_write
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_cmd_send
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> runze_sv04_new.o(i.runze_new)
</UL>
<P><STRONG><a name="[10d]"></a>run_channel_between</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, runze_sv04_new.o(i.run_channel_between))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = run_channel_between &rArr; run_cmd_send &rArr; frame_make_send_wait &rArr; frame_make_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_error_write
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_cmd_send
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_auto_channel_between
</UL>
<BR>[Address Reference Count : 1]<UL><LI> runze_sv04_new.o(i.runze_new)
</UL>
<P><STRONG><a name="[2fa]"></a>run_cmd_send</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, runze_sv04_new.o(i.run_cmd_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = run_cmd_send &rArr; frame_make_send_wait &rArr; frame_make_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_make_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_reset
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_channel_between
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_channel
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_auto_channel
</UL>

<P><STRONG><a name="[10a]"></a>run_reset</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, runze_sv04_new.o(i.run_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = run_reset &rArr; run_cmd_send &rArr; frame_make_send_wait &rArr; frame_make_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_cmd_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> runze_sv04_new.o(i.runze_new)
</UL>
<P><STRONG><a name="[272]"></a>ack_map_erase</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bus.o(i.ack_map_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ack_map_erase &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_post_sem
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_pend_sem
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_map_del
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_hb_send
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
</UL>

<P><STRONG><a name="[271]"></a>ack_map_key_compare</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bus.o(i.ack_map_key_compare))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_map_serach
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_map_del
</UL>

<P><STRONG><a name="[276]"></a>ack_map_post</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, bus.o(i.ack_map_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ack_map_post &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_post_sem
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_pend_sem
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_map_serach
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_frame_handle
</UL>

<P><STRONG><a name="[278]"></a>ack_map_set</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bus.o(i.ack_map_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ack_map_set &rArr; ack_map_insert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_post_sem
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_pend_sem
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_map_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_hb_send
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
</UL>

<P><STRONG><a name="[287]"></a>bus_simple_send</STRONG> (Thumb, 258 bytes, Stack size 88 bytes, bus.o(i.bus_simple_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_sleep
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_post_sem
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_pend_sem
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteU32
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteU16
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_hb_send
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_insert
</UL>

<P><STRONG><a name="[284]"></a>create_session_id</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, bus.o(i.create_session_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = create_session_id &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_post_sem
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_pend_sem
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_hb_send
</UL>

<P><STRONG><a name="[28a]"></a>destroy_session_id</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bus.o(i.destroy_session_id))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_hb_send
</UL>

<P><STRONG><a name="[2fe]"></a>err_func_id_convert_to</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bus.o(i.err_func_id_convert_to))
<BR><BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_frame_handle
</UL>

<P><STRONG><a name="[289]"></a>expect_packet_del</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, bus.o(i.expect_packet_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = expect_packet_del &rArr; expect_packet_tree_post &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_map_serach
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_map_del
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_packet_del
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_tree_post
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_tree_pend
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_hb_send
</UL>

<P><STRONG><a name="[29f]"></a>expect_packet_insert</STRONG> (Thumb, 994 bytes, Stack size 56 bytes, bus.o(i.expect_packet_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = expect_packet_insert &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_post_sem
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadU32
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadU16
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_p_map_serach
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_p_map_modify
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_p_map_serach
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_p_map_older
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_p_map_insert
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_p_map_error
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_p_map_del_outdated
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_q_Enter
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_map_serach
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_map_del
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_packet_del
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_packet_copy
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_packet_alloc
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_tree_post
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_tree_pend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_set
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_simple_send
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_frame_handle
</UL>

<P><STRONG><a name="[285]"></a>expect_packet_set</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, bus.o(i.expect_packet_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = expect_packet_set &rArr; pack_map_insert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_map_insert
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_tree_post
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_tree_pend
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_hb_send
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_insert
</UL>

<P><STRONG><a name="[29b]"></a>expect_packet_tree_pend</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bus.o(i.expect_packet_tree_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = expect_packet_tree_pend &rArr; bus_os_pend_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_pend_sem
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_set
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_insert
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_del
</UL>

<P><STRONG><a name="[29e]"></a>expect_packet_tree_post</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bus.o(i.expect_packet_tree_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = expect_packet_tree_post &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_post_sem
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_set
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_insert
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_del
</UL>

<P><STRONG><a name="[2b1]"></a>frame_q_pend</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bus.o(i.frame_q_pend), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_pend_sem
</UL>

<P><STRONG><a name="[2b0]"></a>frame_q_post</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bus.o(i.frame_q_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = frame_q_post &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_post_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_q_Enter
</UL>

<P><STRONG><a name="[2f3]"></a>pack_map_key_compare</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bus.o(i.pack_map_key_compare))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_map_serach
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_map_del
</UL>

<P><STRONG><a name="[2f4]"></a>packet_q_pend</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bus.o(i.packet_q_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = packet_q_pend &rArr; bus_os_pend_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_pend_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_callback_thread
</UL>

<P><STRONG><a name="[2f8]"></a>packet_q_post</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bus.o(i.packet_q_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = packet_q_post &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_post_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_q_Enter
</UL>

<P><STRONG><a name="[2fd]"></a>rx_frame_handle</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, bus.o(i.rx_frame_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = rx_frame_handle &rArr; expect_packet_insert &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_p_map_del
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expect_packet_insert
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_func_id_convert_to
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_map_post
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_packet_thread
</UL>

<P><STRONG><a name="[2ff]"></a>rx_p_map_key_compare</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bus.o(i.rx_p_map_key_compare))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_p_map_serach
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_p_map_error
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_p_map_del
</UL>

<P><STRONG><a name="[304]"></a>tx_p_map_key_compare</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bus.o(i.tx_p_map_key_compare))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_p_map_serach
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_p_map_modify
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_p_map_del
</UL>

<P><STRONG><a name="[2e8]"></a>Get_WaitTaskId</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, mtmc5130device.o(i.Get_WaitTaskId))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130ProcessSemPost
</UL>

<P><STRONG><a name="[2e7]"></a>IS_Targeted</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mtmc5130device.o(i.IS_Targeted))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130ProcessSemPost
</UL>

<P><STRONG><a name="[2e4]"></a>mTMC5130Motor_MoveEvent</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, mtmc5130device.o(i.mTMC5130Motor_MoveEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = mTMC5130Motor_MoveEvent &rArr; mTMC5130DevicMoveby &rArr; mTMC5130DevicMoveRealPosition &rArr; mTMC5130DeviceGetState &rArr; mTMC5130DriverGetState &rArr; SPI_WriteRead &rArr; SPI_WriteReadIf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicMoveby
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceGetState
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DeviceGetPostion
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicStop
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130DevicMoveto
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_MoveStopEvent
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTMC5130Motor_MoveGPIOEvent
</UL>

<P><STRONG><a name="[71]"></a>packet_parse</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, itf_00010000.o(i.packet_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = packet_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadU16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00010000.o(i.Itf_00010000_new)
</UL>
<P><STRONG><a name="[72]"></a>ret_and_free</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, itf_00010000.o(i.ret_and_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ret_and_free &rArr; bus_ita_return &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00010000.o(i.Itf_00010000_new)
</UL>
<P><STRONG><a name="[73]"></a>packet_parse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, itf_00010010.o(i.packet_parse))
<BR>[Address Reference Count : 1]<UL><LI> itf_00010010.o(i.Itf_00010010_new)
</UL>
<P><STRONG><a name="[74]"></a>ret_and_free</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, itf_00010010.o(i.ret_and_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ret_and_free &rArr; bus_ita_return &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteF32
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteU16
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00010010.o(i.Itf_00010010_new)
</UL>
<P><STRONG><a name="[75]"></a>packet_parse</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, itf_00010020 .o(i.packet_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = packet_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadF32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00010020 .o(i.Itf_00010020_new)
</UL>
<P><STRONG><a name="[76]"></a>ret_and_free</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, itf_00010020 .o(i.ret_and_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ret_and_free &rArr; bus_ita_return &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00010020 .o(i.Itf_00010020_new)
</UL>
<P><STRONG><a name="[77]"></a>packet_parse</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, itf_00010030 .o(i.packet_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = packet_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadF32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00010030 .o(i.Itf_00010030_new)
</UL>
<P><STRONG><a name="[78]"></a>ret_and_free</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, itf_00010030 .o(i.ret_and_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ret_and_free &rArr; bus_ita_return &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00010030 .o(i.Itf_00010030_new)
</UL>
<P><STRONG><a name="[79]"></a>packet_parse</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, itf_00010031.o(i.packet_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = packet_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadF32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00010031.o(i.Itf_00010031_new)
</UL>
<P><STRONG><a name="[7a]"></a>ret_and_free</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, itf_00010031.o(i.ret_and_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ret_and_free &rArr; bus_ita_return &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00010031.o(i.Itf_00010031_new)
</UL>
<P><STRONG><a name="[7b]"></a>packet_parse</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, itf_00010040 .o(i.packet_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = packet_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadF32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00010040 .o(i.Itf_00010040_new)
</UL>
<P><STRONG><a name="[7c]"></a>ret_and_free</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, itf_00010040 .o(i.ret_and_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ret_and_free &rArr; bus_ita_return &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00010040 .o(i.Itf_00010040_new)
</UL>
<P><STRONG><a name="[7d]"></a>packet_parse</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, itf_00010050.o(i.packet_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = packet_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadF32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00010050.o(i.Itf_00010050_new)
</UL>
<P><STRONG><a name="[7e]"></a>ret_and_free</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, itf_00010050.o(i.ret_and_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ret_and_free &rArr; bus_ita_return &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00010050.o(i.Itf_00010050_new)
</UL>
<P><STRONG><a name="[7f]"></a>packet_parse</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, itf_00010060.o(i.packet_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = packet_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadF32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00010060.o(i.Itf_00010060_new)
</UL>
<P><STRONG><a name="[80]"></a>ret_and_free</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, itf_00010060.o(i.ret_and_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ret_and_free &rArr; bus_ita_return &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00010060.o(i.Itf_00010060_new)
</UL>
<P><STRONG><a name="[83]"></a>packet_parse</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, itf_00010070.o(i.packet_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = packet_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadF32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00010070.o(i.Itf_00010070_new)
</UL>
<P><STRONG><a name="[84]"></a>ret_and_free</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, itf_00010070.o(i.ret_and_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ret_and_free &rArr; bus_ita_return &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteF32
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00010070.o(i.Itf_00010070_new)
</UL>
<P><STRONG><a name="[87]"></a>packet_parse</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, itf_00010080.o(i.packet_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = packet_parse &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadU32
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadF32
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00010080.o(i.Itf_00010080_new)
</UL>
<P><STRONG><a name="[88]"></a>ret_and_free</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, itf_00010080.o(i.ret_and_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ret_and_free &rArr; bus_ita_return &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00010080.o(i.Itf_00010080_new)
</UL>
<P><STRONG><a name="[89]"></a>packet_parse</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, itf_00010082.o(i.packet_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = packet_parse &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadU32
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadF32
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadU16
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00010082.o(i.Itf_00010082_new)
</UL>
<P><STRONG><a name="[8a]"></a>ret_and_free</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, itf_00010082.o(i.ret_and_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ret_and_free &rArr; bus_ita_return &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00010082.o(i.Itf_00010082_new)
</UL>
<P><STRONG><a name="[85]"></a>packet_parse</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, itf_00010071.o(i.packet_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = packet_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadF32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00010071.o(i.Itf_00010071_new)
</UL>
<P><STRONG><a name="[86]"></a>ret_and_free</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, itf_00010071.o(i.ret_and_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ret_and_free &rArr; bus_ita_return &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteF32
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00010071.o(i.Itf_00010071_new)
</UL>
<P><STRONG><a name="[8b]"></a>packet_parse</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, itf_00010083.o(i.packet_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = packet_parse &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadU32
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadF32
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadU16
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00010083.o(i.Itf_00010083_new)
</UL>
<P><STRONG><a name="[8c]"></a>ret_and_free</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, itf_00010083.o(i.ret_and_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ret_and_free &rArr; bus_ita_return &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00010083.o(i.Itf_00010083_new)
</UL>
<P><STRONG><a name="[f7]"></a>packet_parse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, itf_00040000.o(i.packet_parse))
<BR>[Address Reference Count : 1]<UL><LI> itf_00040000.o(i.itf_00040000_new)
</UL>
<P><STRONG><a name="[f8]"></a>rtn_and_free</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, itf_00040000.o(i.rtn_and_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = rtn_and_free &rArr; bus_ita_return &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteU16
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00040000.o(i.itf_00040000_new)
</UL>
<P><STRONG><a name="[fb]"></a>packet_parse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, itf_00040010.o(i.packet_parse))
<BR>[Address Reference Count : 1]<UL><LI> itf_00040010.o(i.itf_00040010_new)
</UL>
<P><STRONG><a name="[fc]"></a>rtn_and_free</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, itf_00040010.o(i.rtn_and_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = rtn_and_free &rArr; bus_ita_return &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteU32
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00040010.o(i.itf_00040010_new)
</UL>
<P><STRONG><a name="[fd]"></a>packet_parse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, itf_00040020.o(i.packet_parse))
<BR>[Address Reference Count : 1]<UL><LI> itf_00040020.o(i.itf_00040020_new)
</UL>
<P><STRONG><a name="[fe]"></a>rtn_and_free</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, itf_00040020.o(i.rtn_and_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = rtn_and_free &rArr; bus_ita_return &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteU32
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00040020.o(i.itf_00040020_new)
</UL>
<P><STRONG><a name="[ff]"></a>packet_parse</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, itf_00040030.o(i.packet_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = packet_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadU16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00040030.o(i.itf_00040030_new)
</UL>
<P><STRONG><a name="[100]"></a>rtn_and_free</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, itf_00040030.o(i.rtn_and_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = rtn_and_free &rArr; bus_ita_return &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteU32
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00040030.o(i.itf_00040030_new)
</UL>
<P><STRONG><a name="[117]"></a>cfg_covert_io_state</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, io_mod.o(i.cfg_covert_io_state))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> io_mod.o(i.writable_io_new)
</UL>
<P><STRONG><a name="[118]"></a>group_write</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, io_mod.o(i.group_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = group_write &rArr; io_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timing_io_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> io_mod.o(i.writable_io_new)
</UL>
<P><STRONG><a name="[119]"></a>io_write</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, io_mod.o(i.io_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = io_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_error_write
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_covert_io_state
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;group_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> io_mod.o(i.writable_io_new)
</UL>
<P><STRONG><a name="[11a]"></a>timing_io_write</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, io_mod.o(i.timing_io_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = timing_io_write &rArr; group_write &rArr; io_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_os_sleep
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;group_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> io_mod.o(i.writable_io_new)
</UL>
<P><STRONG><a name="[ef]"></a>packet_parse</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, itf_00020000.o(i.packet_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = packet_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadU32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00020000.o(i.itf_00020000_new)
</UL>
<P><STRONG><a name="[f0]"></a>rtn_and_free</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, itf_00020000.o(i.rtn_and_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = rtn_and_free &rArr; bus_ita_return &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00020000.o(i.itf_00020000_new)
</UL>
<P><STRONG><a name="[f3]"></a>packet_parse</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, itf_00030000.o(i.packet_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = packet_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadU16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00030000.o(i.itf_00030000_new)
</UL>
<P><STRONG><a name="[f4]"></a>rtn_and_free</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, itf_00030000.o(i.rtn_and_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = rtn_and_free &rArr; bus_ita_return &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00030000.o(i.itf_00030000_new)
</UL>
<P><STRONG><a name="[95]"></a>packet_parse</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, itf_01000c20.o(i.packet_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = packet_parse &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadU32
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadF32
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_01000c20.o(i.Itf_01000c20_new)
</UL>
<P><STRONG><a name="[96]"></a>ret_and_free</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, itf_01000c20.o(i.ret_and_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ret_and_free &rArr; bus_ita_return &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteU32
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_01000c20.o(i.Itf_01000c20_new)
</UL>
<P><STRONG><a name="[93]"></a>packet_parse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, itf_01000b04.o(i.packet_parse))
<BR>[Address Reference Count : 1]<UL><LI> itf_01000b04.o(i.Itf_01000b04_new)
</UL>
<P><STRONG><a name="[94]"></a>ret_and_free</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, itf_01000b04.o(i.ret_and_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ret_and_free &rArr; bus_ita_return &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_01000b04.o(i.Itf_01000b04_new)
</UL>
<P><STRONG><a name="[8d]"></a>packet_parse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, itf_000100a0.o(i.packet_parse))
<BR>[Address Reference Count : 1]<UL><LI> itf_000100a0.o(i.Itf_000100a0_new)
</UL>
<P><STRONG><a name="[8e]"></a>ret_and_free</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, itf_000100a0.o(i.ret_and_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ret_and_free &rArr; bus_ita_return &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_000100a0.o(i.Itf_000100a0_new)
</UL>
<P><STRONG><a name="[8f]"></a>packet_parse</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, itf_000100a1.o(i.packet_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = packet_parse &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_000100a1.o(i.Itf_000100a1_new)
</UL>
<P><STRONG><a name="[90]"></a>ret_and_free</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, itf_000100a1.o(i.ret_and_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ret_and_free &rArr; bus_ita_return &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_000100a1.o(i.Itf_000100a1_new)
</UL>
<P><STRONG><a name="[91]"></a>packet_parse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, itf_000100a2.o(i.packet_parse))
<BR>[Address Reference Count : 1]<UL><LI> itf_000100a2.o(i.Itf_000100a2_new)
</UL>
<P><STRONG><a name="[92]"></a>ret_and_free</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, itf_000100a2.o(i.ret_and_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ret_and_free &rArr; bus_ita_return &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_000100a2.o(i.Itf_000100a2_new)
</UL>
<P><STRONG><a name="[97]"></a>packet_parse</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, itf_01000c21.o(i.packet_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = packet_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadU32
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadF32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_01000c21.o(i.Itf_01000c21_new)
</UL>
<P><STRONG><a name="[98]"></a>ret_and_free</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, itf_01000c21.o(i.ret_and_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ret_and_free &rArr; bus_ita_return &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteU32
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteF32
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_01000c21.o(i.Itf_01000c21_new)
</UL>
<P><STRONG><a name="[f9]"></a>packet_parse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, itf_00040001.o(i.packet_parse))
<BR>[Address Reference Count : 1]<UL><LI> itf_00040001.o(i.itf_00040001_new)
</UL>
<P><STRONG><a name="[fa]"></a>rtn_and_free</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, itf_00040001.o(i.rtn_and_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = rtn_and_free &rArr; bus_ita_return &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteU32
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00040001.o(i.itf_00040001_new)
</UL>
<P><STRONG><a name="[99]"></a>packet_parse</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, itf_01000c23.o(i.packet_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = packet_parse &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadU32
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadF32
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_01000c23.o(i.Itf_01000c23_new)
</UL>
<P><STRONG><a name="[9a]"></a>ret_and_free</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, itf_01000c23.o(i.ret_and_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ret_and_free &rArr; bus_ita_return &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteU32
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteF32
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_01000c23.o(i.Itf_01000c23_new)
</UL>
<P><STRONG><a name="[f1]"></a>packet_parse</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, itf_00020001.o(i.packet_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = packet_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadU32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00020001.o(i.itf_00020001_new)
</UL>
<P><STRONG><a name="[f2]"></a>rtn_and_free</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, itf_00020001.o(i.rtn_and_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = rtn_and_free &rArr; bus_ita_return &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00020001.o(i.itf_00020001_new)
</UL>
<P><STRONG><a name="[f5]"></a>packet_parse</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, itf_00030001.o(i.packet_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = packet_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadU16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00030001.o(i.itf_00030001_new)
</UL>
<P><STRONG><a name="[f6]"></a>rtn_and_free</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, itf_00030001.o(i.rtn_and_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = rtn_and_free &rArr; bus_ita_return &rArr; bus_simple_send &rArr; bus_os_post_sem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_ita_return
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> itf_00030001.o(i.itf_00030001_new)
</UL>
<P><STRONG><a name="[298]"></a>make_table</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, tool.o(i.make_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = make_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32
</UL>

<P><STRONG><a name="[22f]"></a>OS_InitEventList</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, os_core.o(i.OS_InitEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_InitEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[22c]"></a>OS_InitMisc</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, os_core.o(i.OS_InitMisc))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[22d]"></a>OS_InitRdyList</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(i.OS_InitRdyList))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[22e]"></a>OS_InitTCBList</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, os_core.o(i.OS_InitTCBList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[231]"></a>OS_InitTaskIdle</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, os_core.o(i.OS_InitTaskIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[232]"></a>OS_InitTaskStat</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, os_core.o(i.OS_InitTaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[236]"></a>OS_SchedNew</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_core.o(i.OS_SchedNew))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[180]"></a>CheckITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, candriver.o(i.CheckITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver_CAN_GetITStatus
</UL>

<P><STRONG><a name="[183]"></a>gpio_af_config</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, candriver.o(i.gpio_af_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_af_config
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_handle_get
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver_Can1Init
</UL>

<P><STRONG><a name="[182]"></a>gpio_config</STRONG> (Thumb, 410 bytes, Stack size 32 bytes, candriver.o(i.gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_config
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_handle_get
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver_Can1Init
</UL>

<P><STRONG><a name="[2b2]"></a>gpio_handle_get</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, candriver.o(i.gpio_handle_get))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_config
</UL>

<P><STRONG><a name="[184]"></a>mcu_nvic_set</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, candriver.o(i.mcu_nvic_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mcu_nvic_set
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver_Can1Init
</UL>

<P><STRONG><a name="[13b]"></a>Heap1_SizeAdjust</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[312]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[30b]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[322]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[316]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[151]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[68]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
